<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R&#39;tichoke</title>
    <link>https://rtichoke.netlify.app/</link>
    <description>Recent content on R&#39;tichoke</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://rtichoke.netlify.app/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Find optimal portfolios using particle swarm optimisation in R</title>
      <link>https://rtichoke.netlify.app/post/portfolio_optimisation_using_pso/</link>
      <pubDate>Fri, 05 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://rtichoke.netlify.app/post/portfolio_optimisation_using_pso/</guid>
      <description>&lt;p&gt;In the &lt;a href=&#34;https://rtichoke.netlify.app/post/pso_optimisation&#34;&gt;last post&lt;/a&gt; we explored how to build a particle swarm optimiser from scratch. In this post, let&amp;rsquo;s explore how we can leverage such an optimiser to perform mean variance optimisation to find optimal portfolios that satisfy certain constraints.&lt;/p&gt;
&lt;p&gt;Additional information on mean variance optimisation and the CAPM model is available in this &lt;a href=&#34;http://www.columbia.edu/~mh2078/FoundationsFE/MeanVariance-CAPM.pdf&#34;&gt;paper&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;libraries&#34;&gt;Libraries&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# install.packages(pacman)&lt;/span&gt;
pacman&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;p_load&lt;/span&gt;(pso, ggplot2, dplyr, quantmod, tidyr, plotly) 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;pre-requisites&#34;&gt;Pre-requisites&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ll need a few things before we can actually start running some optimisations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Historical prices data&lt;/li&gt;
&lt;li&gt;Historical returns data&lt;/li&gt;
&lt;li&gt;Objective functions and constraints&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;ticker-information&#34;&gt;Ticker information&lt;/h4&gt;
&lt;p&gt;Since I am based out of India, I&amp;rsquo;ll restrict myself to stocks that are part of the  &lt;a href=&#34;https://www1.nseindia.com/live_market/dynaContent/live_watch/equities_stock_watch.htm&#34;&gt;NIFTY50&lt;/a&gt; index. First we&amp;rsquo;ll need the tickers for each of the 50 stocks. The list is available as a csv file on the NSE website &lt;a href=&#34;https://www1.nseindia.com/products/content/equities/indices/nifty_50.htm&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Read csv file directly into R&lt;/span&gt;
ticker_list &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read.csv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www1.nseindia.com/content/indices/ind_nifty50list.csv&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;(ticker_list)
&lt;span style=&#34;color:#75715e&#34;&gt;## [1] &amp;#34;data.frame&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Check if data was red in correctly&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;(ticker_list[,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;##                                 Company.Name           Industry     Symbol&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## 1 Adani Ports and Special Economic Zone Ltd.           SERVICES ADANIPORTS&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## 2                          Asian Paints Ltd.     CONSUMER GOODS ASIANPAINT&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## 3                             Axis Bank Ltd. FINANCIAL SERVICES   AXISBANK&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## 4                            Bajaj Auto Ltd.         AUTOMOBILE BAJAJ-AUTO&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## 5                         Bajaj Finance Ltd. FINANCIAL SERVICES BAJFINANCE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;historical-prices&#34;&gt;Historical prices&lt;/h4&gt;
&lt;p&gt;Now that we have the right set of tickers, we need historical price data. The &lt;code&gt;quantmod&lt;/code&gt; package is perfect for something like this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Note that for India, tickers need to be appended with &amp;#34;.NS&amp;#34;&lt;/span&gt;
tickers &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;paste0&lt;/span&gt;(ticker_list&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;Symbol, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.NS&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Pull data using quantmod::getSymbols&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Since getsymbols assigns data for each ticker to a &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# separate variable, we&amp;#39;ll use a loop to pull data for one&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ticker at a time and append to a data.frame&lt;/span&gt;
ticker_df &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;()

pb &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;txtProgressBar&lt;/span&gt;(min &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;(tickers), style &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;for&lt;/span&gt;(nms in tickers){
  df &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getSymbols&lt;/span&gt;(Symbols &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nms, verbose &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F, src &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yahoo&amp;#34;&lt;/span&gt;, auto.assign &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F)
  
  &lt;span style=&#34;color:#a6e22e&#34;&gt;colnames&lt;/span&gt;(df) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;open&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;high&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;low&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;close&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;volume&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;adjusted&amp;#34;&lt;/span&gt;)
  df &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(df)
  df&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;ticker &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; nms
  df&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;date &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rownames&lt;/span&gt;(df)
  ticker_df &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rbind&lt;/span&gt;(ticker_df, df)
  
  &lt;span style=&#34;color:#a6e22e&#34;&gt;setTxtProgressBar&lt;/span&gt;(pb, &lt;span style=&#34;color:#a6e22e&#34;&gt;which&lt;/span&gt;(tickers &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; nms))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# We&amp;#39;ll need to do some data cleaning &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Using only closing prices&lt;/span&gt;
prices_df &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pivot_wider&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ticker_df, id_cols &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;date&amp;#34;&lt;/span&gt;, names_from &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ticker&amp;#34;&lt;/span&gt;, values_from &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;close&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# For simplicity, we&amp;#39;ll remove all NAs&lt;/span&gt;
prices_df &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;na.omit&lt;/span&gt;(prices_df)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Check date range for which data is available&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;range&lt;/span&gt;(prices_df&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;date)
&lt;span style=&#34;color:#75715e&#34;&gt;## [1] &amp;#34;2017-11-17&amp;#34; &amp;#34;2021-10-29&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Check dimensions&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;dim&lt;/span&gt;(prices_df)
&lt;span style=&#34;color:#75715e&#34;&gt;## [1] 973  51&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Chart to check if data has been downloaded correctly &lt;/span&gt;
prices_df &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# Convert to long form for easy plotting with ggplot&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;gather&lt;/span&gt;(key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ticker&amp;#34;&lt;/span&gt;, value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;price&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;date) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# Attach industry&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;left_join&lt;/span&gt;(ticker_list &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
              &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(ticker &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;paste0&lt;/span&gt;(Symbol, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.NS&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
              &lt;span style=&#34;color:#a6e22e&#34;&gt;select&lt;/span&gt;(ticker, industry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Industry),
            by &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ticker&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.Date&lt;/span&gt;(date)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# Showing only metals&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(industry &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;METALS&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# Plot with ggplot&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; date, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; price, color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ticker)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_line&lt;/span&gt;(size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.8&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_minimal&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;scale_color_brewer&lt;/span&gt;(palette &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RdBu&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;labs&lt;/span&gt;(title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Closing Prices&amp;#34;&lt;/span&gt;, 
       subtitle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Nifty 50 metal stocks&amp;#34;&lt;/span&gt;,
       x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Date&amp;#34;&lt;/span&gt;, 
       y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Closing Price&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;(legend.position &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;top&amp;#34;&lt;/span&gt;, 
        legend.title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;element_text&lt;/span&gt;(colour &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;transparent&amp;#34;&lt;/span&gt;), 
        axis.title.x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;element_text&lt;/span&gt;(face &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bold&amp;#34;&lt;/span&gt;), 
        axis.title.y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;element_text&lt;/span&gt;(face &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bold&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;chart1-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;historical-returns&#34;&gt;Historical returns&lt;/h4&gt;
&lt;p&gt;For the sake of simplicity we&amp;rsquo;ll calculate daily returns.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Calculate daily returns&lt;/span&gt;
returns_df &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt;(prices_df[,&lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(vec){
  ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; vec&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lag&lt;/span&gt;(vec) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;return&lt;/span&gt;(ret)
})

returns_df &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.data.frame&lt;/span&gt;(returns_df)
returns_df &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; returns_df[&lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;,]  &lt;span style=&#34;color:#75715e&#34;&gt;## Remove first row since that&amp;#39;s NA&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;objective-function-and-constraints&#34;&gt;Objective function and constraints&lt;/h2&gt;
&lt;p&gt;The objective function depends on three things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mean returns (Reward)&lt;/li&gt;
&lt;li&gt;Portfolio variance (Risk)&lt;/li&gt;
&lt;li&gt;Risk aversion parameter&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally, we&amp;rsquo;ll add a constraint to ensure &lt;code&gt;full investment&lt;/code&gt; i.e. individual weights must add-up to one.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Pre computing average returns and the covariance matrix&lt;/span&gt;
mean_returns &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sapply&lt;/span&gt;(returns_df, mean)
cov_mat &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cov&lt;/span&gt;(returns_df)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;obj_func &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(wts, 
                     risk_av &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, 
                     lambda1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, 
                     lambda2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1e2&lt;/span&gt;, 
                     ret_vec, cov_mat){
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# Some matrix multiplication  &lt;/span&gt;
  port_returns &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; ret_vec &lt;span style=&#34;color:#f92672&#34;&gt;%*%&lt;/span&gt; wts
  port_risk &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;(wts) &lt;span style=&#34;color:#f92672&#34;&gt;%*%&lt;/span&gt; cov_mat &lt;span style=&#34;color:#f92672&#34;&gt;%*%&lt;/span&gt; wts
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# Objective function &lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# Note that alpha is the risk aversion parameter&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# Higher the value of alpha the more conservative the portfolio&lt;/span&gt;
  obj &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; port_returns &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; risk_av &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; port_risk
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# Full investment penalisation &lt;/span&gt;
  obj &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; obj &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; lambda1 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(wts) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)^2
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# Returning negative since the optimiser does minimisation by default &lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# We need maximisation&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;return&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;obj)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;optimiser-2-asset-example&#34;&gt;Optimiser (2 asset example)&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ll start with a two asset example just so we can visualise how everything comes together.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Calculate average returns and covariance matrix for 2 assets&lt;/span&gt;
mean_returns_small &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt;(returns_df[,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, mean)
cov_mat_small &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cov&lt;/span&gt;(returns_df[,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ll use the optimiser that we built previously (with small modifications). See &lt;a href=&#34;https://rtichoke.netlify.app/posts/pso_optisation&#34;&gt;here&lt;/a&gt; for more details.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;pso_optim &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(obj_func,
                      c1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.05&lt;/span&gt;,
                      c2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.05&lt;/span&gt;,
                      w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.8&lt;/span&gt;,
                      init_fact &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;,
                      n_particles &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,
                      n_dim &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
                      n_iter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;,
                      upper &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
                      lower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                      n_avg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,
                      &lt;span style=&#34;color:#66d9ef&#34;&gt;...&lt;/span&gt;){
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# Initialise positions&lt;/span&gt;
  X &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;matrix&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;runif&lt;/span&gt;(n_particles &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n_dim), nrow &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n_particles)
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# Ensure upper and lower bounds are respected&lt;/span&gt;
  X &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; X &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (upper &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; lower) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; lower
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# Initialise velocities&lt;/span&gt;
  dX &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;matrix&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;runif&lt;/span&gt;(n_particles &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n_dim) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; init_fact, ncol &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n_dim)
  dX &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; dX &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (upper &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; lower) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; lower
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# Get first personal and global bests&lt;/span&gt;
  pbest &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; X
  pbest_obj &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt;(X, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, obj_func, &lt;span style=&#34;color:#66d9ef&#34;&gt;...&lt;/span&gt;)
  
  gbest &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; pbest&lt;span style=&#34;color:#a6e22e&#34;&gt;[which.min&lt;/span&gt;(pbest_obj),]
  gbest_obj &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(pbest_obj)
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# Initialise an empty data frame to store results&lt;/span&gt;
  loc_df &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(X, iter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pbest_obj)
  iter &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  
  &lt;span style=&#34;color:#a6e22e&#34;&gt;while&lt;/span&gt;(iter &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n_iter){
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Find updated velocities &lt;/span&gt;
    dX &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; dX &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; c1&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;runif&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(pbest &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; X) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; c2&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;runif&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;(gbest &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;(X))
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Update positions&lt;/span&gt;
    X &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; X &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dX
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Calculate objective function&lt;/span&gt;
    obj &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt;(X, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, obj_func, &lt;span style=&#34;color:#66d9ef&#34;&gt;...&lt;/span&gt;)
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Update local and global bests&lt;/span&gt;
    idx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;which&lt;/span&gt;(obj &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; pbest_obj)
    pbest[idx,] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; X[idx,]
    pbest_obj[idx] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; obj[idx]
    
    idx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;which.min&lt;/span&gt;(pbest_obj)
    gbest &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; pbest[idx,]
    gbest_obj &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(pbest_obj)
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Update iteration and store locations&lt;/span&gt;
    iter &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; iter &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    loc_df &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rbind&lt;/span&gt;(loc_df, &lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(X, iter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; iter, obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pbest_obj))
  }
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# Create list containing relevant items to be returned&lt;/span&gt;
  lst &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(X &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; loc_df, obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gbest_obj, obj_loc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gbest)
  &lt;span style=&#34;color:#a6e22e&#34;&gt;return&lt;/span&gt;(lst)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;out &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pso_optim&lt;/span&gt;(obj_func,
                 ret_vec &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mean_returns_small, 
                 cov_mat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cov_mat_small,
                 lambda1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, risk_av &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,
                 n_particles &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,
                 n_dim &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
                 n_iter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;,
                 upper &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, lower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, 
                 c1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.02&lt;/span&gt;, c2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.02&lt;/span&gt;, w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.05&lt;/span&gt;, init_fact &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.01&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Check if weights add to one&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(out&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;obj_loc)
&lt;span style=&#34;color:#75715e&#34;&gt;## [1] 0.9975584&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can now visualise the function we were trying to optimise as well as the path each particle took to get to the optimal result (its interactive so feel free to play around with the plot).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;grid &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;expand.grid&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;seq&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, by &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.01&lt;/span&gt;), 
                    y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;seq&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, by &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.01&lt;/span&gt;))

grid&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;obj &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt;(grid, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, obj_func, ret_vec &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mean_returns_small, cov_mat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cov_mat_small, 
                  lambda1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, risk_av &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Interactive 3D scatter plot with mesh&lt;/span&gt;
p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plot_ly&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;add_mesh&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; grid, x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;x, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;y, z &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;obj, inherit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F, color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;add_markers&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; out&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;X, x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;X1, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;X2, z &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;obj, color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; iter, inherit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F, 
              marker &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))
  
htmlwidgets&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;saveWidget&lt;/span&gt;(p, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;plotly.html&amp;#34;&lt;/span&gt;) 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Interactive 3D scatter plot&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;plot_ly&lt;/span&gt;(out&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;X, x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;X1, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;X2, z &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;obj) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;add_markers&lt;/span&gt;(size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;add_mesh&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; grid, x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;x, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;y, z &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;obj, inherit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;iframe src = &#34;plotly.html&#34; width=&#34;800&#34; height=&#34;600&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;Looks a little odd but gets the point across (hopefully) 😅&lt;/p&gt;
&lt;h2 id=&#34;optimiser-multi-asset-example&#34;&gt;Optimiser (multi asset example)&lt;/h2&gt;
&lt;p&gt;We can now look to solve the optimisation problem for multiple assets. We can use the &lt;strong&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/pso/index.html&#34;&gt;pso&lt;/a&gt;&lt;/strong&gt; package to do this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;n_stocks &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ncol&lt;/span&gt;(returns_df)
opt &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;psoptim&lt;/span&gt;(par &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, n_stocks),
               fn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; obj_func,
               ret_vec &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mean_returns, 
               cov_mat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cov_mat,
               lambda1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, risk_av &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;,
               lower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, n_stocks),
               upper &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n_stocks),
               control &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(maxit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;, s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, maxit.stagnate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;))

&lt;span style=&#34;color:#a6e22e&#34;&gt;paste&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Portfolio returns:&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;round&lt;/span&gt;(opt&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;par &lt;span style=&#34;color:#f92672&#34;&gt;%*%&lt;/span&gt; mean_returns, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;## [1] &amp;#34;Portfolio returns: 0.00067&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;paste&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Portfolio Std dev:&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;round&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt&lt;/span&gt;(opt&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;par &lt;span style=&#34;color:#f92672&#34;&gt;%*%&lt;/span&gt; cov_mat &lt;span style=&#34;color:#f92672&#34;&gt;%*%&lt;/span&gt; opt&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;par), &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;## [1] &amp;#34;Portfolio Std dev: 0.0099&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Check if weights add up to one &lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(opt&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;par)
&lt;span style=&#34;color:#75715e&#34;&gt;## [1] 0.9935782&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And that&amp;rsquo;s pretty much it. Additional constraints can be added very easily. Say for example we wanted to add &lt;code&gt;tracking error&lt;/code&gt; so as to penalise deviations from a benchmark portfolio.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Benchmark portfolio &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# For now let&amp;#39;s use an equally weighted portfolio  &lt;/span&gt;
bench_wts &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;n_stocks, n_stocks)
bench_returns &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.matrix&lt;/span&gt;(returns_df) &lt;span style=&#34;color:#f92672&#34;&gt;%*%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;(bench_wts))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Update the objective function &lt;/span&gt;
obj_func_TE &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(wts,  
                        risk_av &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, 
                        lambda1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,  
                        lambda2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, 
                        ret_vec, cov_mat){
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# Some matrix multiplication  &lt;/span&gt;
  port_returns &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; ret_vec &lt;span style=&#34;color:#f92672&#34;&gt;%*%&lt;/span&gt; wts
  port_risk &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;(wts) &lt;span style=&#34;color:#f92672&#34;&gt;%*%&lt;/span&gt; cov_mat &lt;span style=&#34;color:#f92672&#34;&gt;%*%&lt;/span&gt; wts
  port_returns_ts &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.matrix&lt;/span&gt;(returns_df) &lt;span style=&#34;color:#f92672&#34;&gt;%*%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;(wts))
  
  obj &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; port_returns &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; risk_av &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; port_risk
  obj &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; obj &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; lambda1 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(wts) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)^2
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# Tracking error &lt;/span&gt;
  obj &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; obj &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; lambda2 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sd&lt;/span&gt;(port_returns_ts &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; bench_returns)
  
  &lt;span style=&#34;color:#a6e22e&#34;&gt;return&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;obj) 
}

opt &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;psoptim&lt;/span&gt;(par &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, n_stocks),
               fn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; obj_func_TE,
               ret_vec &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mean_returns, 
               cov_mat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cov_mat,
               lambda1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, risk_av &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;,
               lower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, n_stocks),
               upper &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n_stocks),
               control &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(maxit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;, s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, maxit.stagnate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;))

&lt;span style=&#34;color:#a6e22e&#34;&gt;paste&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Portfolio returns:&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;round&lt;/span&gt;(opt&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;par &lt;span style=&#34;color:#f92672&#34;&gt;%*%&lt;/span&gt; mean_returns, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;## [1] &amp;#34;Portfolio returns: 0.00074&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;paste&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Portfolio Std dev:&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;round&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt&lt;/span&gt;(opt&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;par &lt;span style=&#34;color:#f92672&#34;&gt;%*%&lt;/span&gt; cov_mat &lt;span style=&#34;color:#f92672&#34;&gt;%*%&lt;/span&gt; opt&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;par), &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;## [1] &amp;#34;Portfolio Std dev: 0.01231&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Check if weights add up to one &lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(opt&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;par)
&lt;span style=&#34;color:#75715e&#34;&gt;## [1] 0.9960087&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;parting-notes&#34;&gt;Parting notes&lt;/h1&gt;
&lt;p&gt;I like how simple yet effective PSO is. However, due to the nature of how it works, results, especially for arbitrarily complex functions can be a challenge to work with. One might need to run it multiple times and do some kind of averaging to reduce variability in outputs.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Thoughts? Comments? Helpful? Not helpful? Like to see anything else added in here? Let me know!&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to build a basic particle swarm optimiser from scratch in R</title>
      <link>https://rtichoke.netlify.app/post/pso_optimisation/</link>
      <pubDate>Tue, 12 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://rtichoke.netlify.app/post/pso_optimisation/</guid>
      <description>&lt;script src=&#34;https://polyfill.io/v3/polyfill.min.js?features=es6&#34;&gt;&lt;/script&gt;
&lt;script id=&#34;MathJax-script&#34; async src=&#34;https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;This post is inspired by a really approachable &lt;a href=&#34;https://machinelearningmastery.com/a-gentle-introduction-to-particle-swarm-optimization/?utm_source=drip&amp;amp;utm_medium=email&amp;amp;utm_campaign=An+intro+to+particle+swarm+optimization&amp;amp;utm_content=An+intro+to+particle+swarm+optimization&#34;&gt;post&lt;/a&gt; on particle swarm optimisation by &lt;a href=&#34;https://machinelearningmastery.com/author/adriantam/&#34;&gt;Adrian Tam&lt;/a&gt;. We&amp;rsquo;ll build a basic particle swam optimiser in R and try to visualise the results.&lt;/p&gt;
&lt;h2 id=&#34;libraries&#34;&gt;Libraries&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# install.packages(pacman)&lt;/span&gt;
pacman&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;p_load&lt;/span&gt;(dplyr, gganimate, metR)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;objective-function&#34;&gt;Objective function&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ll use the &lt;a href=&#34;https://en.wikipedia.org/wiki/Ackley_function&#34;&gt;Ackley&amp;rsquo;s Function&lt;/a&gt; here to evaluate how well the optimiser works. The function has many local optima and should pose a challenge to the optimisation routine.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;obj_func &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(x, y){
  &lt;span style=&#34;color:#75715e&#34;&gt;# Modifying for a different global minimum&lt;/span&gt;
  &lt;span style=&#34;color:#ae81ff&#34;&gt;-20&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exp&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;-0.2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((x&lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;)^2 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (y&lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;)^2))) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exp&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cos&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pi&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cos&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pi&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;y))) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exp&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Set of x and y values (search domain)&lt;/span&gt;
x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;seq&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;-10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, length.out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;seq&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;-10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, length.out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Create a data frame that stores every permutation of &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# x and y coordinates&lt;/span&gt;
grid &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;expand.grid&lt;/span&gt;(x, y, stringsAsFactors &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;(grid)
&lt;span style=&#34;color:#75715e&#34;&gt;##         Var1 Var2&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## 1 -10.000000  -10&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## 2  -9.797980  -10&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## 3  -9.595960  -10&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## 4  -9.393939  -10&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## 5  -9.191919  -10&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## 6  -8.989899  -10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Evaluate the objective function at each x, y value&lt;/span&gt;
grid&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;z &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;obj_func&lt;/span&gt;(grid[,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], grid[,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])

&lt;span style=&#34;color:#75715e&#34;&gt;# create a contour plot&lt;/span&gt;
contour_plot &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(grid, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Var1, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Var2)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_contour_filled&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(z &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; z), color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;black&amp;#34;&lt;/span&gt;, alpha &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;scale_fill_brewer&lt;/span&gt;(palette &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Spectral&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_minimal&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;labs&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;, title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ackley&amp;#39;s Function&amp;#34;&lt;/span&gt;, subtitle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Contour plot&amp;#34;&lt;/span&gt;)

contour_plot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;chart1-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;optimiser-basics&#34;&gt;Optimiser basics&lt;/h2&gt;
&lt;p&gt;The optimiser works as such:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start with set of random search points uniformly distributed across the search domain&lt;/li&gt;
&lt;li&gt;Find the objective function value at each of these points&lt;/li&gt;
&lt;li&gt;Track the minimum(or maximum) value of the objective function achieved at each search point&lt;/li&gt;
&lt;li&gt;Move each search point a small amount in two directions:
&lt;ul&gt;
&lt;li&gt;Towards the locally optimal value (for that point)&lt;/li&gt;
&lt;li&gt;Towards the globally optimal value (across all points)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Repeat&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Or to put it more formally:&lt;/p&gt;
&lt;p&gt;Say we are operating in 2 dimensions (x and y coordinates). Then, for each particle &lt;code&gt;i&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$$x_{t+1}^i = x_{t}^i + \Delta{x_t}^i$$&lt;/code&gt;
&lt;code&gt;$$y_{t+1}^i = y_{t}^i + \Delta{y_t}^i$$&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And,&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$$\Delta{x_t}^i = w\Delta{x_{t-1}^i} + c_1r_1(x_{localBest} - x_i) + c_2r_2(x_{globalBest} - x_i)$$&lt;/code&gt;
&lt;code&gt;$$\Delta{y_t}^i = w\Delta{y_{t-1}^i} + c_1r_1(y_{localBest} - y_i) + c_2r_2(y_{globalBest} - y_i)$$&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Where &lt;code&gt;w&lt;/code&gt;, &lt;code&gt;c1&lt;/code&gt;, &lt;code&gt;c2&lt;/code&gt;, &lt;code&gt;r1&lt;/code&gt;, &lt;code&gt;r2&lt;/code&gt; are positive constants. &lt;code&gt;r1&lt;/code&gt; and &lt;code&gt;r2&lt;/code&gt; are uniformly distributed (positive) random numbers. These random numbers need to be positive because the direction in which each particle will move is decided by where &lt;code&gt;localBest&lt;/code&gt; and &lt;code&gt;globalBest&lt;/code&gt; are. Again, &lt;code&gt;localBest&lt;/code&gt; is the optimal function value observed by the &lt;code&gt;ith&lt;/code&gt; particle and &lt;code&gt;globalBest&lt;/code&gt; is the optimal function value across all particles.&lt;/p&gt;
&lt;h2 id=&#34;implementing-a-single-iteration&#34;&gt;Implementing a single iteration&lt;/h2&gt;
&lt;h3 id=&#34;initial-positions&#34;&gt;Initial positions&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Say we start with 20 particles&lt;/span&gt;
n_particles &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Set some initial values for constants&lt;/span&gt;
w &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;
c1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.05&lt;/span&gt;
c2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Search domain in x and y coordinates &lt;/span&gt;
x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;seq&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;-10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, length.out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)
y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;seq&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;-10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, length.out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Combine into a matrix&lt;/span&gt;
X &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sample&lt;/span&gt;(x, n_particles, replace &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F), 
                y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sample&lt;/span&gt;(y, n_particles, replace &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Chart starting locations&lt;/span&gt;
contour_plot &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_point&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; X, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x, y), color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;, size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2.5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;labs&lt;/span&gt;(title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PSO&amp;#34;&lt;/span&gt;, subtitle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Iter 0&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;chart2-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;starting-perturbations&#34;&gt;Starting perturbations&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Uniformly distributed (positive) perturbations&lt;/span&gt;
dX &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;matrix&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;runif&lt;/span&gt;(n_particles &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), ncol &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Scale down the perturbations by a factor (w in the equation above)&lt;/span&gt;
dX &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; dX &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; w
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Set the location of the local best (optimal value) to starting positions &lt;/span&gt;
pbest &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; X

&lt;span style=&#34;color:#75715e&#34;&gt;# Evaluate the function at each point and store &lt;/span&gt;
pbest_obj &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;obj_func&lt;/span&gt;(X[,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], X[,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])

&lt;span style=&#34;color:#75715e&#34;&gt;# Find a global best and its position&lt;/span&gt;
gbest &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; pbest&lt;span style=&#34;color:#a6e22e&#34;&gt;[which.min&lt;/span&gt;(pbest_obj),]
gbest_obj &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(pbest_obj)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;X_dir &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; X &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(g_x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gbest[1,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], 
         g_y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gbest[1,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], 
         angle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;atan&lt;/span&gt;((g_y &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;(g_x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; x))&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;180&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pi&lt;/span&gt;, 
         angle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ifelse&lt;/span&gt;(g_x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; x, &lt;span style=&#34;color:#ae81ff&#34;&gt;180&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; angle, angle))

contour_plot &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_point&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; X, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x, y), color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;, size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2.5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_arrow&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; X_dir, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x, y, mag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, angle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; angle), direction &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ccw&amp;#34;&lt;/span&gt;, pivot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, show.legend &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;labs&lt;/span&gt;(title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PSO&amp;#34;&lt;/span&gt;, subtitle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Iter 0&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;chart3-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;updating-positions&#34;&gt;Updating Positions&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Update dx based on the equation shown previously&lt;/span&gt;
dX &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; dX &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; c1&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;runif&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(pbest &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; X) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; c2&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;runif&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;as.matrix&lt;/span&gt;(gbest) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; X)

&lt;span style=&#34;color:#75715e&#34;&gt;# Add dx to current locations&lt;/span&gt;
X &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; X &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dX

&lt;span style=&#34;color:#75715e&#34;&gt;# Evaluate objective function at new positions&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Note that X[,1] is the first column i.e. x coordinates&lt;/span&gt;
obj &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;obj_func&lt;/span&gt;(X[,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], X[,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])

&lt;span style=&#34;color:#75715e&#34;&gt;# Find those points where the objective function is lower &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# than previous iteration &lt;/span&gt;
idx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;which&lt;/span&gt;(obj &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; pbest_obj)

&lt;span style=&#34;color:#75715e&#34;&gt;# Update locations of local best and store local best values&lt;/span&gt;
pbest[idx,] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; X[idx,]
pbest_obj[idx] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; obj[idx]

&lt;span style=&#34;color:#75715e&#34;&gt;# Identify the minimum value of the of the objective function &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# amongst all points &lt;/span&gt;
idx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;which.min&lt;/span&gt;(pbest_obj)

&lt;span style=&#34;color:#75715e&#34;&gt;# Store as global best &lt;/span&gt;
gbest &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; pbest[idx,]
gbest_obj &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(pbest_obj)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;X_dir &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; X &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(g_x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gbest[1,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], 
         g_y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gbest[1,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], 
         angle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;atan&lt;/span&gt;((g_y &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;(g_x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; x))&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;180&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pi&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# Need angles to show direction&lt;/span&gt;
         angle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ifelse&lt;/span&gt;(g_x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; x, &lt;span style=&#34;color:#ae81ff&#34;&gt;180&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; angle, angle))

contour_plot &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_point&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; X, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x, y), color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;, size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2.5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_arrow&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; X_dir, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x, y, mag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, angle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; angle), direction &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ccw&amp;#34;&lt;/span&gt;, pivot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, show.legend &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;labs&lt;/span&gt;(title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PSO&amp;#34;&lt;/span&gt;, subtitle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Iter 1&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;chart4-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;chart6-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;putting-it-all-together&#34;&gt;Putting it all together&lt;/h2&gt;
&lt;p&gt;We can now encapsulate everything inside a function for ease of use.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Final function&lt;/span&gt;
pso_optim &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(obj_func,  &lt;span style=&#34;color:#75715e&#34;&gt;#Accept a function directly &lt;/span&gt;
                      c1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.05&lt;/span&gt;,
                      c2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.05&lt;/span&gt;,
                      w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.8&lt;/span&gt;,
                      n_particles &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,
                      init_fact &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;,
                      n_iter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, 
                      &lt;span style=&#34;color:#66d9ef&#34;&gt;...&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;# This ensures we can pass any additional &lt;/span&gt;
                            &lt;span style=&#34;color:#75715e&#34;&gt;# parameters to the objective function&lt;/span&gt;
){
  
  x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;seq&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(x), &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(x), length.out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
  y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;seq&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(y), &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(y), length.out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
  
  X &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cbind&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sample&lt;/span&gt;(x, n_particles, replace &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F),
             &lt;span style=&#34;color:#a6e22e&#34;&gt;sample&lt;/span&gt;(y, n_particles, replace &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F))
  
  dX &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;matrix&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;runif&lt;/span&gt;(n_particles &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; init_fact, ncol &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
  
  pbest &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; X
  pbest_obj &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;obj_func&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; X[,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; X[,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])
  
  gbest &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; pbest&lt;span style=&#34;color:#a6e22e&#34;&gt;[which.min&lt;/span&gt;(pbest_obj),]
  gbest_obj &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(pbest_obj)
  
  loc_df &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(X, iter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
  iter &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  
  &lt;span style=&#34;color:#a6e22e&#34;&gt;while&lt;/span&gt;(iter &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n_iter){
    
    dX &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; dX &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; c1&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;runif&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(pbest &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; X) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; c2&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;runif&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;(gbest &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;(X))
    X &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; X &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dX
    
    obj &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;obj_func&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; X[,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; X[,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])
    
    idx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;which&lt;/span&gt;(obj &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; pbest_obj)
    pbest[idx,] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; X[idx,]
    pbest_obj[idx] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; obj[idx]
    
    idx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;which.min&lt;/span&gt;(pbest_obj)
    gbest &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; pbest[idx,]
    gbest_obj &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(pbest_obj)
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Update iteration&lt;/span&gt;
    iter &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; iter &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    loc_df &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rbind&lt;/span&gt;(loc_df, &lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(X, iter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; iter))
  }
  
  lst &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(X &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; loc_df, obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gbest_obj, obj_loc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;paste0&lt;/span&gt;(gbest, collapse &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;))
  &lt;span style=&#34;color:#a6e22e&#34;&gt;return&lt;/span&gt;(lst)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Test optimiser&lt;/span&gt;
out &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pso_optim&lt;/span&gt;(obj_func,
                 x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x,
                 y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y,
                 c1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.01&lt;/span&gt;,
                 c2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.05&lt;/span&gt;,
                 w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;, 
                 n_particles &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;,
                 init_fact &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;,
                 n_iter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Global minimum is at (1,1)&lt;/span&gt;
out&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;obj_loc
&lt;span style=&#34;color:#75715e&#34;&gt;## [1] &amp;#34;0.999970489653139,1.00001974997258&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;animating-results&#34;&gt;Animating results&lt;/h2&gt;
&lt;p&gt;This part is fun! We can use the awesome &lt;code&gt;gganimate&lt;/code&gt; package to visualise the path of each point and see how the optimiser searches and converges towards an optimal value.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(out&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;X) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_contour&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; grid, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Var1, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Var2, z &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; z), color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;black&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_point&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(X1, X2)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;labs&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;transition_time&lt;/span&gt;(iter) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;ease_aes&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;linear&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;anim.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;parting-notes&#34;&gt;Parting notes&lt;/h2&gt;
&lt;p&gt;A few things are worth noting here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;c1&lt;/code&gt; decides how much a given point moves towards the best value that it has encountered thus far. Keeping this value low helps the optimiser converge faster.&lt;/li&gt;
&lt;li&gt;Increasing &lt;code&gt;w&lt;/code&gt; also helps converge faster but if its too high and then the optimiser tends to swing back and forth between solutions.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;flex items-center justify-center font-content-sans rounded bg-raven-100 px-4 py-4&#34; role=&#34;alert&#34;&gt;
  &lt;span class=&#34;text-xs font-bold uppercase leading-none rounded-full text-raven-100 bg-raven-500 px-2 py-1 mr-3&#34;&gt;info&lt;/span&gt;
  &lt;span class=&#34;font-semibold text-raven-700&#34;&gt;High c1 and low c2. Notice the inertia?&lt;/span&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;anim_1.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;flex items-center justify-center font-content-sans rounded bg-raven-100 px-4 py-4&#34; role=&#34;alert&#34;&gt;
  &lt;span class=&#34;text-xs font-bold uppercase leading-none rounded-full text-raven-100 bg-raven-500 px-2 py-1 mr-3&#34;&gt;info&lt;/span&gt;
  &lt;span class=&#34;font-semibold text-raven-700&#34;&gt;High w. Notice how the optimiser meanders around a little bit?&lt;/span&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;anim_2.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Thoughts? Comments? Helpful? Not helpful? Like to see anything else added in here? Let me know!&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using bootstrapped sampling to assess variability in score predictions </title>
      <link>https://rtichoke.netlify.app/post/assessing_score_reliability/</link>
      <pubDate>Thu, 30 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://rtichoke.netlify.app/post/assessing_score_reliability/</guid>
      <description>&lt;p&gt;When building risk scorecards, apart from the variety of performance metrics, analysts also assess something known as  &lt;code&gt;risk-ranking&lt;/code&gt; i.e. whether or not the observed event rates increase (or decrease) monotonically with increasing (or decreasing) scores. Sometimes, models are not able to risk-rank borrowers in the tails (regions of very high or very low scores). While this is expected, it would be nice if we could quantify this effect. One way to do this would be to use bootstrapped samples to assess variability in model predictions.&lt;/p&gt;
&lt;h2 id=&#34;basic-idea&#34;&gt;Basic idea&lt;/h2&gt;
&lt;p&gt;The underlying idea is very simple - less available data for estimation equates to lower quality of estimation. As a simple example, we can observe this effect when trying to estimate quantiles of a probability distribution.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Number of samples to be drawn from a probability distribution&lt;/span&gt;
n_samples &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Number of times, sampling should be repeated&lt;/span&gt;
repeats &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Mean and std-dev for a standard normal distribution&lt;/span&gt;
mu &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
std_dev &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Sample&lt;/span&gt;
samples &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(n_samples &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; repeats, mean &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Fit into a matrix like object with `n_samples&amp;#39; number of rows &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# and `repeats` number of columns&lt;/span&gt;
samples &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;matrix&lt;/span&gt;(samples, nrow &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n_samples, ncol &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; repeats)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Compute mean across each column&lt;/span&gt;
sample_means &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt;(samples, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, mean)

&lt;span style=&#34;color:#75715e&#34;&gt;# Similarly, compute 75% and 95% quantile across each column&lt;/span&gt;
sample_75_quantile &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt;(samples, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, quantile, p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.75&lt;/span&gt;)
sample_95_quantile &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt;(samples, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, quantile, p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.95&lt;/span&gt;)
sample_99_quantile &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt;(samples, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, quantile, p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.99&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sd&lt;/span&gt;(sample_means)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mean&lt;/span&gt;(sample_means)
&lt;span style=&#34;color:#75715e&#34;&gt;## [1] 0.01023223&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;sd&lt;/span&gt;(sample_75_quantile)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mean&lt;/span&gt;(sample_75_quantile)
&lt;span style=&#34;color:#75715e&#34;&gt;## [1] 0.01258346&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;sd&lt;/span&gt;(sample_95_quantile)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mean&lt;/span&gt;(sample_75_quantile)
&lt;span style=&#34;color:#75715e&#34;&gt;## [1] 0.01810062&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;combined_vec &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(sample_means, sample_75_quantile, sample_95_quantile, sample_99_quantile)

&lt;span style=&#34;color:#a6e22e&#34;&gt;plot&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;density&lt;/span&gt;(sample_means), 
     col &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#6F69AC&amp;#34;&lt;/span&gt;, 
     lwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, 
     main &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Estimating the mean vs tail quantiles&amp;#34;&lt;/span&gt;, 
     xlab &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, 
     xlim &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(combined_vec), &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(combined_vec)))

&lt;span style=&#34;color:#a6e22e&#34;&gt;lines&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;density&lt;/span&gt;(sample_75_quantile), col &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#95DAC1&amp;#34;&lt;/span&gt;, lwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;lines&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;density&lt;/span&gt;(sample_95_quantile), col &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#FFEBA1&amp;#34;&lt;/span&gt;, lwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;lines&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;density&lt;/span&gt;(sample_99_quantile), col &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#FD6F96&amp;#34;&lt;/span&gt;, lwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;grid&lt;/span&gt;()

&lt;span style=&#34;color:#a6e22e&#34;&gt;legend&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;topright&amp;#34;&lt;/span&gt;, 
       fill &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#6F69AC&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#95DAC1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#FFEBA1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#FD6F96&amp;#34;&lt;/span&gt;), 
       legend &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mean&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;75% Quantile&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;95% Quantile&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;99% Quantile&amp;#34;&lt;/span&gt;), 
       cex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.7&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;chart1-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;It is easy to notice that the uncertainty in estimating the sample 99% quantile is much higher than the uncertainty in estimating the sample mean. We will now try to extend this idea to a scorecard model.&lt;/p&gt;
&lt;h2 id=&#34;libraries&#34;&gt;Libraries&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#install.packages(&amp;#34;pacman&amp;#34;)&lt;/span&gt;
pacman&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;p_load&lt;/span&gt;(dplyr, magrittr, rsample, ggplot2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;sample-data&#34;&gt;Sample data&lt;/h2&gt;
&lt;p&gt;As in previous posts, we&amp;rsquo;ll use a small sample &lt;a href=&#34;https://github.com/royr2/blog/blob/main/download/credit_sample.csv&#34;&gt;(download here)&lt;/a&gt; of the &lt;strong&gt;Lending Club&lt;/strong&gt; dataset available on &lt;a href=&#34;https://www.kaggle.com/wordsforthewise/lending-club&#34;&gt;Kaggle&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;sample &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read.csv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;credit_sample.csv&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;creating-a-target&#34;&gt;Creating a target&lt;/h2&gt;
&lt;p&gt;The next step is to create a target (dependent variable) to model for.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Mark which loan status will be tagged as default&lt;/span&gt;
codes &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Charged Off&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Does not meet the credit policy. Status:Charged Off&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Apply above codes and create target&lt;/span&gt;
sample &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;lt;&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(bad_flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ifelse&lt;/span&gt;(loan_status &lt;span style=&#34;color:#f92672&#34;&gt;%in%&lt;/span&gt; codes, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))

&lt;span style=&#34;color:#75715e&#34;&gt;# Replace missing values with a default value&lt;/span&gt;
sample&lt;span style=&#34;color:#a6e22e&#34;&gt;[is.na&lt;/span&gt;(sample)] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Get summary tally&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;table&lt;/span&gt;(sample&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;bad_flag)
&lt;span style=&#34;color:#75715e&#34;&gt;## &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;##    0    1 &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## 8838 1162&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;sampling&#34;&gt;Sampling&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ll use &lt;code&gt;bootstrapped sampling&lt;/code&gt; to create multiple training sets. We will then repeatedly train a model on each training set and assess the variability in volatile model predictions across score ranges. We&amp;rsquo;ll use the &lt;code&gt;bootstraps()&lt;/code&gt; function in the &lt;code&gt;rsample&lt;/code&gt; package.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Create 100 samples&lt;/span&gt;
boot_sample &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bootstraps&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sample, times &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;(boot_sample, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;## # A tibble: 3 x 2&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;##   splits               id          &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;##   &amp;lt;list&amp;gt;               &amp;lt;chr&amp;gt;       &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## 1 &amp;lt;split [10000/3692]&amp;gt; Bootstrap001&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## 2 &amp;lt;split [10000/3712]&amp;gt; Bootstrap002&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## 3 &amp;lt;split [10000/3696]&amp;gt; Bootstrap003&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;boot_sample&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;splits[[1]]
&lt;span style=&#34;color:#75715e&#34;&gt;## &amp;lt;Analysis/Assess/Total&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## &amp;lt;10000/3692/10000&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Each row represents a separate bootstrapped sample whereas within each sample, there are two sub-samples namely an &lt;code&gt;analysis set&lt;/code&gt; and an &lt;code&gt;assessment set&lt;/code&gt;. To retrieve a bootstrapped sample as a &lt;code&gt;data.frame&lt;/code&gt;, the package provides two helper functions -  &lt;code&gt;analysis()&lt;/code&gt; and &lt;code&gt;assessment()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Show the first 5 rows and 5 columns of the first sample&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;analysis&lt;/span&gt;(boot_sample&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;splits[[1]]) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; .[1&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]
&lt;span style=&#34;color:#75715e&#34;&gt;##         V1        id member_id loan_amnt funded_amnt&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## 5428 12946  94135798        -1     28000       28000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## 4019 24972 110418022        -1     20400       20400&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## 5729   718 144715469        -1     40000       40000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## 7927 66593 138895956        -1     10000       10000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## 9668 62772 107983553        -1      6300        6300&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;a href=&#34;https://rsample.tidymodels.org/articles/rsample.html&#34;&gt;getting started&lt;/a&gt; page of the &lt;code&gt;rsample&lt;/code&gt; package has additional information.&lt;/p&gt;
&lt;h2 id=&#34;creating-a-modeling-function&#34;&gt;Creating a modeling function&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ll use a simple &lt;code&gt;glm()&lt;/code&gt; model for illustrative purposes. First, we&amp;rsquo;ll need to create a function that fits such a model to a given dataset&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;glm_model &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(df){
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# Fit a simple model with a set specification&lt;/span&gt;
  mdl &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;glm&lt;/span&gt;(bad_flag &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;
               loan_amnt &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; funded_amnt &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; annual_inc &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; delinq_2yrs &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
               inq_last_6mths &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; mths_since_last_delinq &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; fico_range_low &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
               mths_since_last_record &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; revol_util &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; total_pymnt,
             family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;binomial&amp;#34;&lt;/span&gt;,
             data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df)
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# Return fitted values&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;return&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;predict&lt;/span&gt;(mdl))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Test the function&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Retrieve a data frame&lt;/span&gt;
train &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;analysis&lt;/span&gt;(boot_sample&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;splits[[1]])

&lt;span style=&#34;color:#75715e&#34;&gt;# Predict&lt;/span&gt;
pred &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;glm_model&lt;/span&gt;(train)

&lt;span style=&#34;color:#75715e&#34;&gt;# Check output&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;range&lt;/span&gt;(pred)  &lt;span style=&#34;color:#75715e&#34;&gt;# Output is on log odds scale&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## [1] -25.618826   1.699397&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;fitting-the-model-repeatedly&#34;&gt;Fitting the model repeatedly&lt;/h2&gt;
&lt;p&gt;Now we need to fit the model repeatedly on each of the bootstrapped samples and store the fitted values. And since we are using &lt;code&gt;R&lt;/code&gt;, for-loops are not allowed 😆&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# First apply the glm fitting function to each of the sample&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Note the use of lapply&lt;/span&gt;
output &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lapply&lt;/span&gt;(boot_sample&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;splits, &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(x){
  train &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;analysis&lt;/span&gt;(x)
  pred &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;glm_model&lt;/span&gt;(train)

  &lt;span style=&#34;color:#a6e22e&#34;&gt;return&lt;/span&gt;(pred)
})

&lt;span style=&#34;color:#75715e&#34;&gt;# Collate all predictions into a vector &lt;/span&gt;
boot_preds &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;do.call&lt;/span&gt;(c, output)
&lt;span style=&#34;color:#a6e22e&#34;&gt;range&lt;/span&gt;(boot_preds)
&lt;span style=&#34;color:#75715e&#34;&gt;## [1] -145.993853    4.115973&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Get outliers&lt;/span&gt;
q_high &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;quantile&lt;/span&gt;(boot_preds, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.99&lt;/span&gt;)
q_low &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;quantile&lt;/span&gt;(boot_preds, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.01&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Truncate the overall distribution to within the lower 1% and upper 1% quantiles&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Doing this since it creates issues later on when scaling the output&lt;/span&gt;
boot_preds[boot_preds &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; q_high] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; q_high
boot_preds[boot_preds &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; q_low] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; q_low

&lt;span style=&#34;color:#a6e22e&#34;&gt;range&lt;/span&gt;(boot_preds)
&lt;span style=&#34;color:#75715e&#34;&gt;## [1] -5.060861 -0.225235&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Convert to a data frame&lt;/span&gt;
boot_preds &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(pred &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; boot_preds, 
                         id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;(boot_sample&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;splits), each &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nrow&lt;/span&gt;(sample)))
&lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;(boot_preds)
&lt;span style=&#34;color:#75715e&#34;&gt;##         pred id&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## 1 -3.1242074  1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## 2 -3.5973415  1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## 3 -0.3822420  1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## 4 -2.6574425  1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## 5 -0.7789107  1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## 6 -1.9527129  1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;scaling-model-predictions&#34;&gt;Scaling model predictions&lt;/h2&gt;
&lt;p&gt;Given &lt;code&gt;log-odds&lt;/code&gt;, we can now scale the output and make it look like a credit score. We&amp;rsquo;ll use the industry standard &lt;strong&gt;points to double odds&lt;/strong&gt; methodology.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;scaling_func &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(vec, PDO &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, OddsAtAnchor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, Anchor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;700&lt;/span&gt;){
  beta &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; PDO &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
  alpha &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; Anchor &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; PDO &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; OddsAtAnchor
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# Simple linear scaling of the log odds&lt;/span&gt;
  scr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; alpha &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; beta &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; vec  
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# Round off&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;return&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;round&lt;/span&gt;(scr, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;boot_preds&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;scores &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scaling_func&lt;/span&gt;(boot_preds&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;pred, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;700&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Chart the distribution of predictions across all the samples&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(boot_preds, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; scores, color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;factor&lt;/span&gt;(id))) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_density&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_minimal&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;(legend.position &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;scale_color_grey&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;labs&lt;/span&gt;(title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Predictions from bootstrapped samples&amp;#34;&lt;/span&gt;, 
       subtitle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Density function&amp;#34;&lt;/span&gt;, 
       x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Predictions (Log odds)&amp;#34;&lt;/span&gt;, 
       y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Density&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;chart2-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;assessing-variability&#34;&gt;Assessing variability&lt;/h2&gt;
&lt;p&gt;Now that we have model predictions for each bootstrapped sample scaled in the form of a score, we can evaluate the variability in these predictions in a visual manner.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Create bins using quantiles&lt;/span&gt;
breaks &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;quantile&lt;/span&gt;(boot_preds&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;scores, probs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;seq&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, length.out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;))
boot_preds&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;bins &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cut&lt;/span&gt;(boot_preds&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;scores, breaks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unique&lt;/span&gt;(breaks), include.lowest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; T, right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; T)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Chart standard deviation of model predictions across each score bin&lt;/span&gt;
boot_preds &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;group_by&lt;/span&gt;(bins) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;summarise&lt;/span&gt;(std_dev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sd&lt;/span&gt;(scores)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bins, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std_dev)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_col&lt;/span&gt;(color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;black&amp;#34;&lt;/span&gt;, fill &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#90AACB&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_minimal&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;(axis.text.x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;element_text&lt;/span&gt;(angle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;(legend.position &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;labs&lt;/span&gt;(title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Variability in model predictions across samples&amp;#34;&lt;/span&gt;, 
       subtitle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(measured using standard deviation)&amp;#34;&lt;/span&gt;, 
       x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Score Range&amp;#34;&lt;/span&gt;, 
       y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard Deviation&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;chart3-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;As expected, the model&amp;rsquo;s predictions are more reliable within a certain range of values (700-800) whereas there is significant variability in the model&amp;rsquo;s predictions in the lowest and highest score buckets.&lt;/p&gt;
&lt;h2 id=&#34;parting-notes&#34;&gt;Parting notes&lt;/h2&gt;
&lt;p&gt;While the outcome of this experiment is not unexpected, an interesting question could be - should analysts and model users define an &lt;strong&gt;operating range&lt;/strong&gt; for their models? In this example, we could set lower and upper limits at &lt;code&gt;700&lt;/code&gt; and &lt;code&gt;800&lt;/code&gt; respectively and any borrower receiving a score beyond these thresholds could be assigned a generic value of &lt;code&gt;700-&lt;/code&gt; or &lt;code&gt;800+&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That said, binning features mitigates this to a certain extent since the model cannot generate predictions beyond a certain range of values.&lt;/p&gt;
&lt;h2 id=&#34;an-useful-extension&#34;&gt;An useful extension&lt;/h2&gt;
&lt;p&gt;&lt;small&gt;&lt;em&gt;Special thanks to &lt;a href=&#34;https://disqus.com/by/richardwarnung/&#34;&gt;Richard Warnung&lt;/a&gt; for his comments&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;In the above analysis, not only did we fit the model repeatedly on different datasets, but we made predictions on different datasets as well. We can remove the effects of the latter if we make predictions on the same test dataset. Here&amp;rsquo;s some code to do this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Create overall training and testing datasets &lt;/span&gt;
id &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sample&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nrow&lt;/span&gt;(sample), size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nrow&lt;/span&gt;(sample)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.8&lt;/span&gt;, replace &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F)

train_data &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; sample[id,]
test_data &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; sample[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;id,]

&lt;span style=&#34;color:#75715e&#34;&gt;# Bootstrapped samples are now pulled only from the overall training dataset&lt;/span&gt;
boot_sample &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bootstraps&lt;/span&gt;(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; train_data, times &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Using the same function from before but predicting on the same test dataset&lt;/span&gt;
glm_model &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(train, test){
  
  mdl &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;glm&lt;/span&gt;(bad_flag &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;
               loan_amnt &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; funded_amnt &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; annual_inc &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; delinq_2yrs &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
               inq_last_6mths &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; mths_since_last_delinq &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; fico_range_low &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
               mths_since_last_record &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; revol_util &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; total_pymnt,
             family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;binomial&amp;#34;&lt;/span&gt;,
             data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; train)
  
  &lt;span style=&#34;color:#a6e22e&#34;&gt;return&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;predict&lt;/span&gt;(mdl, newdata &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; test))
}

&lt;span style=&#34;color:#75715e&#34;&gt;# Train and predict repeatedly&lt;/span&gt;
output &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lapply&lt;/span&gt;(boot_sample&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;splits, &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(x){
  train &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;analysis&lt;/span&gt;(x)
  pred &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;glm_model&lt;/span&gt;(train, test_data)

  &lt;span style=&#34;color:#a6e22e&#34;&gt;return&lt;/span&gt;(pred)
})

&lt;span style=&#34;color:#75715e&#34;&gt;# Collate data into a single data.frame&lt;/span&gt;
boot_preds &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;do.call&lt;/span&gt;(c, output)
boot_preds &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(pred &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; boot_preds, 
                         id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;(boot_sample&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;splits), each &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nrow&lt;/span&gt;(sample)))

boot_preds&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;scores &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scaling_func&lt;/span&gt;(boot_preds&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;pred, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;700&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Forcing scores to a range&lt;/span&gt;
boot_preds&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;scores &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sapply&lt;/span&gt;(boot_preds&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;scores, min, &lt;span style=&#34;color:#ae81ff&#34;&gt;900&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Bin the outputs for easier charting &lt;/span&gt;
breaks &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;quantile&lt;/span&gt;(boot_preds&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;scores, probs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;seq&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, length.out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;))
boot_preds&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;bins &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cut&lt;/span&gt;(boot_preds&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;scores, breaks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unique&lt;/span&gt;(breaks), include.lowest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; T, right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; T)

&lt;span style=&#34;color:#75715e&#34;&gt;# Chart&lt;/span&gt;
boot_preds &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;group_by&lt;/span&gt;(bins) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;summarise&lt;/span&gt;(std_dev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sd&lt;/span&gt;(scores)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bins, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std_dev)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_col&lt;/span&gt;(color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;black&amp;#34;&lt;/span&gt;, fill &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#90AACB&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_minimal&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;(axis.text.x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;element_text&lt;/span&gt;(angle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;(legend.position &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;labs&lt;/span&gt;(title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Variability in model predictions across samples&amp;#34;&lt;/span&gt;, 
       subtitle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Prediction set is fixed&amp;#34;&lt;/span&gt;, 
       x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Score Range&amp;#34;&lt;/span&gt;, 
       y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Standard Deviation&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Thoughts? Comments? Helpful? Not helpful? Like to see anything else added in here? Let me know!&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Monotonic binning using XGBOOST</title>
      <link>https://rtichoke.netlify.app/post/monotonic_binning_using_xgboost/</link>
      <pubDate>Fri, 17 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://rtichoke.netlify.app/post/monotonic_binning_using_xgboost/</guid>
      <description>&lt;p&gt;When developing credit risk scorecards, it is generally a good idea to discretise (bin) numeric variables in a manner that ensures monotonically increasing or decreasing event rates as the variable increases or decreases. While discretising individual variables adds stability to the model, monotonic bins ensure that the model output is consistent and interpretable (i.e. if variable &amp;lsquo;x&amp;rsquo; increases, the computed score increases across each bin). We&amp;rsquo;ll explore how to do create monotonic bins in &lt;code&gt;R&lt;/code&gt; using &lt;code&gt;xgboost&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;libraries&#34;&gt;Libraries&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Pacman is a package management tool &lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;install.packages&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pacman&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(pacman)

&lt;span style=&#34;color:#75715e&#34;&gt;# p_load automatically installs packages if needed&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;p_load&lt;/span&gt;(recipes, dplyr, ggplot2, xgboost, gridExtra)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;sample-dataset&#34;&gt;Sample dataset&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/royr2/blog/blob/main/download/credit_sample.csv&#34;&gt;Here&amp;rsquo;s&lt;/a&gt; a small sample sample of the &lt;strong&gt;Lending Club&lt;/strong&gt; dataset available on &lt;a href=&#34;https://www.kaggle.com/wordsforthewise/lending-club&#34;&gt;Kaggle&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;sample &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read.csv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;credit_sample.csv&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dim&lt;/span&gt;(sample)
&lt;span style=&#34;color:#75715e&#34;&gt;## [1] 10000   153&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;(sample)
&lt;span style=&#34;color:#75715e&#34;&gt;## [1] &amp;#34;data.frame&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;create-a-target&#34;&gt;Create a target&lt;/h2&gt;
&lt;p&gt;Like in my previous &lt;a href=&#34;https://rtichoke.netlify.app/post/gains_table&#34;&gt;post&lt;/a&gt;, I&amp;rsquo;ll use the &lt;code&gt;loan_status&lt;/code&gt; column as the target variable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Specific values to be tagged as &amp;#39;bad&amp;#39;&lt;/span&gt;
codes &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Charged Off&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Does not meet the credit policy. Status:Charged Off&amp;#34;&lt;/span&gt;)

model_data &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; sample &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(bad_flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ifelse&lt;/span&gt;(loan_status &lt;span style=&#34;color:#f92672&#34;&gt;%in%&lt;/span&gt; codes, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;data-prep&#34;&gt;Data prep&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ll use the &lt;code&gt;recipes&lt;/code&gt; package to remove non numeric variables and impute missing values using. For additional details, see the &lt;a href=&#34;https://recipes.tidymodels.org/&#34;&gt;documentation&lt;/a&gt; for &lt;code&gt;recipes&lt;/code&gt;. Note that the formula inside the &lt;code&gt;recipe()&lt;/code&gt; function decides which columns are predictors and which column is the target.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Specify basic recipe&lt;/span&gt;
rec &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;recipe&lt;/span&gt;(bad_flag &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; ., data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; model_data) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;step_select&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;where&lt;/span&gt;(is.numeric)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;step_impute_median&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;all_predictors&lt;/span&gt;())

rec &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prep&lt;/span&gt;(rec, training &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; model_data)

&lt;span style=&#34;color:#75715e&#34;&gt;# Not doing a test/train split &lt;/span&gt;
train &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bake&lt;/span&gt;(rec, new_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; model_data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;analysing-directional-trend&#34;&gt;Analysing directional trend&lt;/h2&gt;
&lt;p&gt;Now that we have a clean training dataset, its important to ascertain how the event rate &lt;em&gt;should&lt;/em&gt; change when a particular variable changes. This is important since this directional trend will dictate how we constraint the &lt;code&gt;xgboost&lt;/code&gt; model.&lt;/p&gt;
&lt;p&gt;A good way to do this is to use both data and intuition. As an example, consider the variable &lt;code&gt;inq_last_6mths&lt;/code&gt; (number of inquiries in the last 6 months). Intuitively, as the number of inquiries increase, one would expect the event rate (chance of default) to increase. We can validate this using a simple bar chart like the one shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; model_data&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;inq_last_6mths,
           y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; model_data&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;bad_flag) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;group_by&lt;/span&gt;(x) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;summarise&lt;/span&gt;(count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;(), 
            events &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(y)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(pct &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; events&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;count) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;factor&lt;/span&gt;(x), y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pct)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_col&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_minimal&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;labs&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;# of inquiries in past 6 months&amp;#34;&lt;/span&gt;, 
       y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Default rate&amp;#34;&lt;/span&gt;, 
       title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Default rate vs number of inquiries in past 6 months&amp;#34;&lt;/span&gt;, 
       subtitle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Positive relationship&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;chart1-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;This confirms our hypothesis and also tells us that we need to constraint the &lt;code&gt;xgboost&lt;/code&gt; model such the probability outcome increases as the value of the variable &lt;code&gt;inq_last_6mths&lt;/code&gt; increases.&lt;/p&gt;
&lt;h2 id=&#34;xgboost-model&#34;&gt;xgboost model&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ll create an xgb model with the following specs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One boosting iteration&lt;/li&gt;
&lt;li&gt;&lt;code&gt;monotone_constraints&lt;/code&gt; = 1 (i.e. splits which only increase the probability outcome)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max_depth&lt;/code&gt; = 10 (as an example, can be deeper if one needs additional bins)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;mdl &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xgboost&lt;/span&gt;(
  data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; train &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;select&lt;/span&gt;(inq_last_6mths) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;## Select only inq_last_6mths&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;as.matrix&lt;/span&gt;(),  &lt;span style=&#34;color:#75715e&#34;&gt;## convert to matrix since the xgboost() interface only accepts matrices&lt;/span&gt;
  label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; train[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bad_flag&amp;#34;&lt;/span&gt;]],  &lt;span style=&#34;color:#75715e&#34;&gt;## Target variable&lt;/span&gt;
  nrounds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;## Only one boosting iteration&lt;/span&gt;
  params &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(objective &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;binary:logistic&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;## Binary outcome&lt;/span&gt;
                monotone_constraints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, 
                max_depth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;))  &lt;span style=&#34;color:#75715e&#34;&gt;## 1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## [19:14:57] WARNING: amalgamation/../src/learner.cc:1115: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective &amp;#39;binary:logistic&amp;#39; was changed from &amp;#39;error&amp;#39; to &amp;#39;logloss&amp;#39;. Explicitly set eval_metric if you&amp;#39;d like to restore the old behavior.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## [1]	train-logloss:0.541928&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;retrieving-splits&#34;&gt;Retrieving splits&lt;/h2&gt;
&lt;p&gt;Now that we have a model, we need to retrieve the split points and evaluate whether the binning scheme is intuitive (or not).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Convert model into a dataframe like output&lt;/span&gt;
splits &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xgb.model.dt.tree&lt;/span&gt;(model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mdl)  

&lt;span style=&#34;color:#75715e&#34;&gt;# Add +/- Inf to provide coverage for values not observed &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# in the training dataset&lt;/span&gt;
cuts &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Inf&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;sort&lt;/span&gt;(splits&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;Split), &lt;span style=&#34;color:#66d9ef&#34;&gt;Inf&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Plot bins and event rates&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; train&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;bad_flag,
           buckets &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cut&lt;/span&gt;(train&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;inq_last_6mths, 
                         breaks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cuts, 
                         include.lowest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; T, 
                         right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; T, 
                         ordered_result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; T)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;group_by&lt;/span&gt;(buckets) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;summarise&lt;/span&gt;(total &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;(),
            events &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(target &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(pct &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; events&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;total) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; buckets, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pct)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_col&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_minimal&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;labs&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bins&amp;#34;&lt;/span&gt;, 
       y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Default rate&amp;#34;&lt;/span&gt;, 
       title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Monotonic binning for number of inquiries in past 6 months&amp;#34;&lt;/span&gt;, 
       subtitle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Monotonically increasing event rate&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;chart2-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;creating-a-function&#34;&gt;Creating a function&lt;/h2&gt;
&lt;p&gt;Finally, we can encapsulate everything we have done so far inside a function for better usability.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;create_bins &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(var, outcome, max_depth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, plot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; T){
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# Check if relationship is positive or negative &lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# Using spearman since it measures strength of monotonic relationship &lt;/span&gt;
  corr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cor&lt;/span&gt;(var, outcome, method &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spearman&amp;#34;&lt;/span&gt;)
  direction &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ifelse&lt;/span&gt;(corr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;)
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# Build XGB model &lt;/span&gt;
  mdl &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xgboost&lt;/span&gt;(
    verbose &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.matrix&lt;/span&gt;(var),
    label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; outcome,
    nrounds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,  
    params &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(objective &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;binary:logistic&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;## Binary outcome&lt;/span&gt;
                  monotone_constraints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; direction, 
                  max_depth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max_depth, 
                  eval_metric &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;auc&amp;#34;&lt;/span&gt;))
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# Retrieve splits &lt;/span&gt;
  splits &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xgb.model.dt.tree&lt;/span&gt;(model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mdl)
  cuts &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Inf&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;sort&lt;/span&gt;(splits&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;Split), &lt;span style=&#34;color:#66d9ef&#34;&gt;Inf&lt;/span&gt;)
  binned &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cut&lt;/span&gt;(var, 
                breaks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cuts, 
                include.lowest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; T, 
                right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; T, 
                ordered_result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; T)
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# Create an event rate plot&lt;/span&gt;
  plt &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(outcome, binned) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
      &lt;span style=&#34;color:#a6e22e&#34;&gt;group_by&lt;/span&gt;(binned) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;summarise&lt;/span&gt;(total &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;(),
                events &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(outcome &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(pct &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; events&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;total) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; binned, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pct)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
      &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_col&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
      &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_minimal&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
      &lt;span style=&#34;color:#a6e22e&#34;&gt;labs&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bins&amp;#34;&lt;/span&gt;, 
           y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Event Rate&amp;#34;&lt;/span&gt;, 
           title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Monotonic binning output&amp;#34;&lt;/span&gt;)
    
  &lt;span style=&#34;color:#a6e22e&#34;&gt;if&lt;/span&gt;(plot &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; T){
    &lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(plt)
  }
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# List to be returned&lt;/span&gt;
  lst &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(
    var &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; var, 
    binned_var &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; binned, 
    cor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; corr, 
    plot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt
  )
  
  &lt;span style=&#34;color:#a6e22e&#34;&gt;return&lt;/span&gt;(lst)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Test function&lt;/span&gt;
v1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_bins&lt;/span&gt;(train&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;fico_range_high, train&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;bad_flag, max_depth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, plot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F)
v2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_bins&lt;/span&gt;(train&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;delinq_amnt, train&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;bad_flag, max_depth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, plot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F)
v3 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_bins&lt;/span&gt;(train&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;int_rate, train&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;bad_flag, max_depth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, plot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F)
v4 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_bins&lt;/span&gt;(train&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;annual_inc, train&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;bad_flag, max_depth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, plot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;grid.arrange&lt;/span&gt;(v1&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;plot &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;labs&lt;/span&gt;(subtitle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fico Range High&amp;#34;&lt;/span&gt;), 
             v2&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;plot &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;labs&lt;/span&gt;(subtitle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Delinq Amount&amp;#34;&lt;/span&gt;), 
             v3&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;plot &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;labs&lt;/span&gt;(subtitle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Interest Rate&amp;#34;&lt;/span&gt;), 
             v4&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;plot &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;labs&lt;/span&gt;(subtitle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Annual Income&amp;#34;&lt;/span&gt;), 
             ncol &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;chart3-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;And that&amp;rsquo;s it! We can use what we just built to discretise variables we need, perform &lt;code&gt;one-hot-encoding&lt;/code&gt; or &lt;code&gt;WOE-transformations&lt;/code&gt; and feed the appropriate model matrix to our choice of statistical routine.&lt;/p&gt;
&lt;h2 id=&#34;parting-notes&#34;&gt;Parting notes&lt;/h2&gt;
&lt;p&gt;Check out this package called &lt;a href=&#34;https://github.com/statcompute/mob&#34;&gt;&lt;code&gt;MonotonicOptimalBinning&lt;/code&gt;&lt;/a&gt; by Wensui Liu which offers multiple binning strategies like isotonic binning, quantile binning and k-means binning.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Thoughts? Comments? Helpful? Not helpful? Like to see anything else added in here? Let me know!&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Visualising COVID data using R and leaflet</title>
      <link>https://rtichoke.netlify.app/post/covid_visualisation_using_leaflet/</link>
      <pubDate>Sun, 12 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://rtichoke.netlify.app/post/covid_visualisation_using_leaflet/</guid>
      <description>&lt;p&gt;&lt;code&gt;Leaflet&lt;/code&gt; is a JavaScript library for interactive maps. Leaflet for R is super easy to use and a great way to visualise data that has a spatial dimension. Below are some examples on how to use the &lt;code&gt;leaflet&lt;/code&gt; package in R to visualise some COVID-19 data.&lt;/p&gt;
&lt;h2 id=&#34;packages&#34;&gt;Packages&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Pacman is a package management tool &lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;install.packages&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pacman&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(pacman)

&lt;span style=&#34;color:#75715e&#34;&gt;# p_load automatically installs packages if needed&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;p_load&lt;/span&gt;(dplyr, leaflet)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;sample-dataset&#34;&gt;Sample dataset&lt;/h2&gt;
&lt;p&gt;A summarised version of the COVID-19 Data Repository hosted by &lt;a href=&#34;https://github.com/CSSEGISandData/COVID-19&#34;&gt;JHU&lt;/a&gt; is available for download &lt;a href=&#34;https://github.com/royr2/blog/blob/main/download/covid_data.csv&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;df &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read.csv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;covid_data.csv&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;confirmed-cases-across-countries&#34;&gt;Confirmed cases across countries&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s say we wanted to visualise how the cumulative case load is distributed across different countries on a map (as of a certain date).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;plt &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; df &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
    &lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(date &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2021-09-01&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Circle radius &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# Arbitrary scaling function for dramatic effect&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(rad &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt&lt;/span&gt;(confirmed&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(confirmed)) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Leaflet&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;leaflet&lt;/span&gt;(options &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;leafletOptions&lt;/span&gt;(minZoom &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, maxZoom &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Base map layer&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# Lots of other options see https://rstudio.github.io/leaflet/basemaps.html&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;addProviderTiles&lt;/span&gt;(providers&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;Stamen.Toner,
                     options &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;providerTileOptions&lt;/span&gt;(opacity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.6&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
    
    &lt;span style=&#34;color:#a6e22e&#34;&gt;addCircleMarkers&lt;/span&gt;(lng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;Longitude, 
                     lat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;Latitude, 
                     radius &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;rad, 
                     popup &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;text,  &lt;span style=&#34;color:#75715e&#34;&gt;## Pop-ups understand html (see df$text)&lt;/span&gt;
                     weight &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.7&lt;/span&gt;,
                     stroke &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;T, 
                     color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#000000&amp;#34;&lt;/span&gt;,
                     fillColor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#79B4B7&amp;#34;&lt;/span&gt;, 
                     fillOpacity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.3&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;plt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;iframe src = &#34;map1.html&#34; height = &#34;600&#34; width = &#34;900&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;The nice thing about leaflet is that visualisations are interactive (try clicking one of the bubbles). Note that the labels have already been generated.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;(df&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;text)
&lt;span style=&#34;color:#75715e&#34;&gt;## [1] &amp;#34;&amp;lt;b&amp;gt;Afghanistan&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;Confirmed: &amp;lt;b&amp;gt;0.0&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;Death: &amp;lt;b&amp;gt;0.0&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;Fatality Ratio: &amp;lt;b&amp;gt;0.0%&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## [2] &amp;#34;&amp;lt;b&amp;gt;Afghanistan&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;Confirmed: &amp;lt;b&amp;gt;0.0&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;Death: &amp;lt;b&amp;gt;0.0&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;Fatality Ratio: &amp;lt;b&amp;gt;0.0%&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## [3] &amp;#34;&amp;lt;b&amp;gt;Afghanistan&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;Confirmed: &amp;lt;b&amp;gt;0.0&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;Death: &amp;lt;b&amp;gt;0.0&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;Fatality Ratio: &amp;lt;b&amp;gt;0.0%&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## [4] &amp;#34;&amp;lt;b&amp;gt;Afghanistan&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;Confirmed: &amp;lt;b&amp;gt;0.0&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;Death: &amp;lt;b&amp;gt;0.0&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;Fatality Ratio: &amp;lt;b&amp;gt;0.0%&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## [5] &amp;#34;&amp;lt;b&amp;gt;Afghanistan&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;Confirmed: &amp;lt;b&amp;gt;0.0&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;Death: &amp;lt;b&amp;gt;0.0&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;Fatality Ratio: &amp;lt;b&amp;gt;0.0%&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## [6] &amp;#34;&amp;lt;b&amp;gt;Afghanistan&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;Confirmed: &amp;lt;b&amp;gt;0.0&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;Death: &amp;lt;b&amp;gt;0.0&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;Fatality Ratio: &amp;lt;b&amp;gt;0.0%&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;tracking-confirmed-cases-over-time&#34;&gt;Tracking confirmed cases over time&lt;/h2&gt;
&lt;p&gt;Now say we wanted to understand how the number of confirmed cases were distributed across countries at different points in time. Leaflet has a nice feature which allows users to add layers to the same graphic and UI elements (like radio buttons) to help switch between layers using the &lt;code&gt;group&lt;/code&gt; argument and the &lt;code&gt;addLayersControl()&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Date series (every 21 days)&lt;/span&gt;
vec &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;seq.Date&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;as.Date&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2020-03-01&amp;#34;&lt;/span&gt;), to &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.Date&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2021-09-01&amp;#34;&lt;/span&gt;), by &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;21 days&amp;#34;&lt;/span&gt;)
vec &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.character&lt;/span&gt;(vec)

plt &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; df &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Track the top 20 countries for each date&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;group_by&lt;/span&gt;(date) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
    
    &lt;span style=&#34;color:#a6e22e&#34;&gt;arrange&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;desc&lt;/span&gt;(confirmed)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
    
    &lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;row_number&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, 
           date &lt;span style=&#34;color:#f92672&#34;&gt;%in%&lt;/span&gt; vec) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Circle radius &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# Arbitrary scaling function for dramatic effect&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(rad &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt&lt;/span&gt;(confirmed&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(confirmed)) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Leaflet&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;leaflet&lt;/span&gt;(options &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;leafletOptions&lt;/span&gt;(minZoom &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, maxZoom &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, )) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Base map layer&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# Lots of other options see https://rstudio.github.io/leaflet/basemaps.html&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;addProviderTiles&lt;/span&gt;(providers&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;Stamen.TonerLite,
                     options &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;providerTileOptions&lt;/span&gt;(opacity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.8&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
    
    &lt;span style=&#34;color:#a6e22e&#34;&gt;addCircleMarkers&lt;/span&gt;(lng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;Longitude, 
                     lat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;Latitude, 
                     radius &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;rad, 
                     popup &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;text,
                     weight &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.7&lt;/span&gt;,
                     stroke &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; T, 
                     color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#000000&amp;#34;&lt;/span&gt;,
                     fillColor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#525c63&amp;#34;&lt;/span&gt;, 
                     fillOpacity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;, 
                     group &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;date, 
                     labelOptions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;labelOptions&lt;/span&gt;(noHide &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
    &lt;span style=&#34;color:#75715e&#34;&gt;# Layer control&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;addLayersControl&lt;/span&gt;(
        
        &lt;span style=&#34;color:#75715e&#34;&gt;# Using baseGroups adds radio buttons which makes it easier to switch&lt;/span&gt;
        baseGroups &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vec,
        
        &lt;span style=&#34;color:#75715e&#34;&gt;# Using overlayGroups adds checkboxes        &lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# overlayGroups = vec&lt;/span&gt;
        
        options &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;layersControlOptions&lt;/span&gt;(collapsed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;plt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;iframe src = &#34;map2.html&#34; height = &#34;600&#34; width = &#34;900&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;It is interesting to note which countries were affected by COVID-19 in early 2020, how it then rapidly spread across Europe, the impact of lock-downs onthe number of confirmed cases, India&amp;rsquo;s terrible second wave in mid 2021 and now the increasing number of cases in South East Asia.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Thoughts? Comments? Helpful? Not helpful? Like to see anything else added in here? Let me know!&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Custom charting functions using ggplot2</title>
      <link>https://rtichoke.netlify.app/post/charting_functions_with_ggplot/</link>
      <pubDate>Sat, 11 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://rtichoke.netlify.app/post/charting_functions_with_ggplot/</guid>
      <description>&lt;p&gt;While &lt;code&gt;R&lt;/code&gt; has variety of options to choose from when it comes to 2D graphics and data visualisation, it is hard to beat &lt;code&gt;ggplot2&lt;/code&gt; in terms of features, functionality and overall visual quality. I wanted to share my take on how to use the package which is, to make customised charting functions for specific chart types using &lt;code&gt;ggplot2&lt;/code&gt; as the underlying visualisation engine.&lt;/p&gt;
&lt;h2 id=&#34;libraries&#34;&gt;Libraries&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Pacman is a package management tool &lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;install.packages&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pacman&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(pacman)

&lt;span style=&#34;color:#75715e&#34;&gt;# p_load automatically installs packages if needed&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;p_load&lt;/span&gt;(dplyr, ggplot2, scales, stringr)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;sample-dataset&#34;&gt;Sample dataset&lt;/h2&gt;
&lt;p&gt;A summarised version of the COVID-19 Data Repository hosted by &lt;a href=&#34;https://github.com/CSSEGISandData/COVID-19&#34;&gt;JHU&lt;/a&gt; is available for download &lt;a href=&#34;https://github.com/royr2/blog/blob/main/download/covid_data.csv&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;df &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read.csv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;covid_data.csv&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Something of interest could be the daily number of confirmed cases for the top five countries (by volume). Some amount of data prep is needed to get to these numbers.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Get top 5 countries&lt;/span&gt;
top_countries &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; df &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;group_by&lt;/span&gt;(country) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;summarise&lt;/span&gt;(count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(deaths_daily)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;top_n&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  .$country
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(top_countries)
&lt;span style=&#34;color:#75715e&#34;&gt;## [1] &amp;#34;Brazil&amp;#34; &amp;#34;India&amp;#34;  &amp;#34;Mexico&amp;#34; &amp;#34;Peru&amp;#34;   &amp;#34;US&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Create a data frame with the required information&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Note that a centered 7 day moving average is used&lt;/span&gt;
plotdf &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; df &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.Date&lt;/span&gt;(date)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(country &lt;span style=&#34;color:#f92672&#34;&gt;%in%&lt;/span&gt; top_countries, 
         date &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2020-05-01&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;group_by&lt;/span&gt;(country, date) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;summarise&lt;/span&gt;(count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(confirmed_daily)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;arrange&lt;/span&gt;(country, date) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;group_by&lt;/span&gt;(country) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(MA &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; zoo&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rollapply&lt;/span&gt;(count, FUN &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mean, width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, by &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, fill &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NA&lt;/span&gt;, align &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;center&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;simple-example&#34;&gt;Simple example&lt;/h2&gt;
&lt;p&gt;Say we needed a line chart visualising the data we just prepared. Note the use &lt;code&gt;aes_string()&lt;/code&gt; instead of just &lt;code&gt;aes()&lt;/code&gt;. This lets us supply arguments to &lt;code&gt;ggplot2&lt;/code&gt; as strings.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Function definition.&lt;/span&gt;
line_chart &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(df, x, y, group_color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;, line_width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, line_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){
  &lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(df, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes_string&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y, color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; group_color)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
    &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_line&lt;/span&gt;(size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line_width, linetype &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line_type)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Test run&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;line_chart&lt;/span&gt;(plotdf, x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;date&amp;#34;&lt;/span&gt;, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MA&amp;#34;&lt;/span&gt;, group_color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;country&amp;#34;&lt;/span&gt;, 
           line_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, line_width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.2&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;chart1-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;customised-theme&#34;&gt;Customised theme&lt;/h2&gt;
&lt;p&gt;Now that we know how to encapsulate the call to &lt;code&gt;ggplot2&lt;/code&gt; in a more intuitive manner, we can create a customised theme for our charts. This is useful since this theme can be applied to any chart.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;custom_theme &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(plt, base_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, base_line_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, palette &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Set1&amp;#34;&lt;/span&gt;){
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# Note the use of &amp;#34;+&amp;#34; and not &amp;#34;%&amp;gt;%&amp;#34;&lt;/span&gt;
  plt &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
    &lt;span style=&#34;color:#75715e&#34;&gt;# Adjust overall font size&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_minimal&lt;/span&gt;(base_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base_size, base_line_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base_line_size) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Put legend at the bottom&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;(legend.position &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bottom&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Different colour scale&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;scale_color_brewer&lt;/span&gt;(palette &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; palette)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Test run&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;line_chart&lt;/span&gt;(plotdf, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;date&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MA&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;country&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;custom_theme&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;chart2-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;adding-bells-and-whistles&#34;&gt;Adding bells and whistles&lt;/h2&gt;
&lt;p&gt;Now that we have some of the basic components, we can add some additional features to our &lt;code&gt;line_chart()&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;line_chart &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(df, x, y, group_color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;, 
                       line_width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, line_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, 
                       xlab &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;, ylab &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;, 
                       title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;, subtitle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;, caption &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;){
  &lt;span style=&#34;color:#75715e&#34;&gt;# Base plot&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(df, &lt;span style=&#34;color:#a6e22e&#34;&gt;aes_string&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y, color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; group_color)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Line chart &lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_line&lt;/span&gt;(size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line_width, linetype &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line_type) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Titles and subtitles&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;labs&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; xlab, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ylab, title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; title, subtitle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; subtitle, caption &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; caption)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ll also tinker with our &lt;code&gt;custom_theme()&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;custom_theme &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(plt, 
                         palette &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Set1&amp;#34;&lt;/span&gt;, 
                         format_x_axis_as &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;, format_y_axis_as &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;, 
                         x_axis_scale &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, y_axis_scale &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, 
                         x_axis_text_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, y_axis_text_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, 
                         base_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, base_line_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){
  
  mappings &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;names&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;unlist&lt;/span&gt;(plt&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;mapping))
  
  p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; plt &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Adjust overall font size&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;theme_minimal&lt;/span&gt;(base_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base_size, base_line_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base_line_size) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Put legend at the bottom&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;(legend.position &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bottom&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Different colour palette&lt;/span&gt;
    {&lt;span style=&#34;color:#a6e22e&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;colour&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%in%&lt;/span&gt; mappings) &lt;span style=&#34;color:#a6e22e&#34;&gt;scale_color_brewer&lt;/span&gt;(palette &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; palette)}&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
    
    {&lt;span style=&#34;color:#a6e22e&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fill&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%in%&lt;/span&gt; mappings) &lt;span style=&#34;color:#a6e22e&#34;&gt;scale_fill_brewer&lt;/span&gt;(palette &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; palette)}&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Change some theme options&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;(plot.background &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;element_rect&lt;/span&gt;(fill &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#f7f7f7&amp;#34;&lt;/span&gt;), 
          plot.subtitle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;element_text&lt;/span&gt;(face &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;italic&amp;#34;&lt;/span&gt;), 
          axis.title.x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;element_text&lt;/span&gt;(face &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bold&amp;#34;&lt;/span&gt;, 
                                      size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x_axis_text_size), 
          axis.title.y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;element_text&lt;/span&gt;(face &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bold&amp;#34;&lt;/span&gt;, 
                                      size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y_axis_text_size)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Change x-axis formatting&lt;/span&gt;
    {&lt;span style=&#34;color:#a6e22e&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;is.null&lt;/span&gt;(format_x_axis_as))
      &lt;span style=&#34;color:#a6e22e&#34;&gt;switch&lt;/span&gt;(format_x_axis_as, 
             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;date&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scale_x_date&lt;/span&gt;(breaks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pretty_breaks&lt;/span&gt;(n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;)), 
             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;number&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scale_x_continuous&lt;/span&gt;(labels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;number_format&lt;/span&gt;(accuracy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;, 
                                                                  decimal.mark &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;, 
                                                                  scale &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x_axis_scale)), 
             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;percent&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scale_x_continuous&lt;/span&gt;(labels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; percent))} &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# Change y-axis formatting&lt;/span&gt;
    {&lt;span style=&#34;color:#a6e22e&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;is.null&lt;/span&gt;(format_y_axis_as))
      
      &lt;span style=&#34;color:#a6e22e&#34;&gt;switch&lt;/span&gt;(format_y_axis_as, 
             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;date&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scale_y_date&lt;/span&gt;(breaks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pretty_breaks&lt;/span&gt;(n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;)), 
             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;number&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scale_y_continuous&lt;/span&gt;(labels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;number_format&lt;/span&gt;(accuracy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;, 
                                                                  decimal.mark &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;, 
                                                                  scale &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y_axis_scale)), 
             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;percent&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scale_y_continuous&lt;/span&gt;(labels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; percent))}
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# Capitalise all names&lt;/span&gt;
  vec &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lapply&lt;/span&gt;(p&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;labels, str_to_title)
  &lt;span style=&#34;color:#a6e22e&#34;&gt;names&lt;/span&gt;(vec) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;names&lt;/span&gt;(p&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;labels)
  p&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;labels &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; vec
  
  &lt;span style=&#34;color:#a6e22e&#34;&gt;return&lt;/span&gt;(p)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now let&amp;rsquo;s see how it all comes together.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;line_chart&lt;/span&gt;(plotdf,
           x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;date&amp;#34;&lt;/span&gt;, 
           y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MA&amp;#34;&lt;/span&gt;, 
           group_color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;country&amp;#34;&lt;/span&gt;, 
           xlab &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Date&amp;#34;&lt;/span&gt;, 
           ylab &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Moving Avg. (in &amp;#39;000)&amp;#34;&lt;/span&gt;, 
           title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Daily COVID19 Case Load&amp;#34;&lt;/span&gt;, 
           subtitle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Top 5 countries by volume&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  
  &lt;span style=&#34;color:#a6e22e&#34;&gt;custom_theme&lt;/span&gt;(format_x_axis_as &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;date&amp;#34;&lt;/span&gt;, 
               format_y_axis_as &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;number&amp;#34;&lt;/span&gt;, 
               y_axis_scale &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.001&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;chart3-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;bar-chart-example&#34;&gt;Bar chart example&lt;/h2&gt;
&lt;p&gt;The good thing about the &lt;code&gt;custom_theme()&lt;/code&gt; function is that it can be applied to any &lt;code&gt;ggplot2&lt;/code&gt; object.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; plotdf &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt;  
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(month &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt;(date, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%m-%b&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;ggplot&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;aes&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; month, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MA, fill &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; country)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;geom_col&lt;/span&gt;(position &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dodge&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;labs&lt;/span&gt;(title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Monthly COVID19 Case load trend&amp;#34;&lt;/span&gt;, 
       subtitle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Top 5 countries&amp;#34;&lt;/span&gt;, 
       x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Month&amp;#34;&lt;/span&gt;, 
       y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Moving Average (&amp;#39;000)&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;custom_theme&lt;/span&gt;(p, palette &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Set1&amp;#34;&lt;/span&gt;, format_y_axis_as &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;number&amp;#34;&lt;/span&gt;, y_axis_scale &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.001&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;chart4-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;parting-notes&#34;&gt;Parting notes&lt;/h2&gt;
&lt;p&gt;It is worth noting that building customised charting functions using &lt;code&gt;ggplot2&lt;/code&gt; is most useful when you need to create the same type of chart(s) again and again. When doing any kind of exploratory work, using &lt;code&gt;ggplot2&lt;/code&gt; directly is easier and more useful since you can build all kinds of charts (or layer charts of different types) within the same pipeline.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Thoughts? Comments? Helpful? Not helpful? Like to see anything else added in here? Let me know!&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Measuring model performance using a gains table</title>
      <link>https://rtichoke.netlify.app/post/gains_table/</link>
      <pubDate>Mon, 06 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://rtichoke.netlify.app/post/gains_table/</guid>
      <description>&lt;p&gt;Modellers/analysts developing credit scores generally use something known as the &lt;code&gt;gains table&lt;/code&gt; (or a &lt;code&gt;ks table&lt;/code&gt;) to measure and quantify the performance of such models. We&amp;rsquo;ll explore how to build such a table in this post.&lt;/p&gt;
&lt;p&gt;The idea is to first discretise the population under consideration (say the testing or validation set) into groups based on the model&amp;rsquo;s output (probability/log odds/scores). Typically, this is done in a way such that each group represents 10% of the total population (or deciles). Then, summary statistics are generated for each group and  cumulative distributions of events and non-events are analysed and the model&amp;rsquo;s performance is quantified.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll use &lt;code&gt;dplyr&lt;/code&gt; in this post. Doing it this way is nice since it&amp;rsquo;s easier to read and the code would need minimal changes if using &lt;code&gt;sparklyr&lt;/code&gt; (say within a big data environment where one might need to run this directly on a &lt;em&gt;hadoop&lt;/em&gt; table).&lt;/p&gt;
&lt;h2 id=&#34;packages&#34;&gt;Packages&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s get package installation out of the way first.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Pacman is a package management tool &lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;install.packages&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pacman&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(pacman)

&lt;span style=&#34;color:#75715e&#34;&gt;# p_load automatically installs packages if needed&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;p_load&lt;/span&gt;(dplyr, magrittr, knitr, scales)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;sample-dataset&#34;&gt;Sample dataset&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/royr2/blog/blob/main/download/credit_sample.csv&#34;&gt;Here&amp;rsquo;s&lt;/a&gt; some sample data to play around with. The data set is small sample of the &lt;strong&gt;Lending Club&lt;/strong&gt; dataset available on &lt;a href=&#34;https://www.kaggle.com/wordsforthewise/lending-club&#34;&gt;Kaggle&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;sample &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read.csv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;credit_sample.csv&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dim&lt;/span&gt;(sample)
&lt;span style=&#34;color:#75715e&#34;&gt;## [1] 10000   153&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;(sample)
&lt;span style=&#34;color:#75715e&#34;&gt;## [1] &amp;#34;data.frame&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;defining-a-target&#34;&gt;Defining a target&lt;/h2&gt;
&lt;p&gt;First, we need to create a target (outcome) to model for. Since this is a credit risk use case, we are looking to create a target which identifies borrowers who defaulted on (or missed) their payments consecutively.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;unique&lt;/span&gt;(sample&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;loan_status)
&lt;span style=&#34;color:#75715e&#34;&gt;## [1] &amp;#34;Fully Paid&amp;#34;                                         &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## [2] &amp;#34;Current&amp;#34;                                            &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## [3] &amp;#34;Charged Off&amp;#34;                                        &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## [4] &amp;#34;Late (31-120 days)&amp;#34;                                 &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## [5] &amp;#34;Late (16-30 days)&amp;#34;                                  &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## [6] &amp;#34;In Grace Period&amp;#34;                                    &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## [7] &amp;#34;Does not meet the credit policy. Status:Fully Paid&amp;#34; &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## [8] &amp;#34;Does not meet the credit policy. Status:Charged Off&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# For simplicity we&amp;#39;ll just use &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 1. &amp;#34;Charged Off&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 2. &amp;#34;Does not meet the credit policy. Status:Charged Off&amp;#34;&lt;/span&gt;
codes &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Charged Off&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Does not meet the credit policy. Status:Charged Off&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# For details on the %&amp;lt;&amp;gt;% operator please look at the &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# documentation for the magrittr package. &lt;/span&gt;
sample &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;lt;&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(bad_flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ifelse&lt;/span&gt;(loan_status &lt;span style=&#34;color:#f92672&#34;&gt;%in%&lt;/span&gt; codes, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s also check for overall event rates.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;sample &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;summarise&lt;/span&gt;(events &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(bad_flag &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), 
            non_events &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(bad_flag &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(event_rate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; events&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;(events &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; non_events))
&lt;span style=&#34;color:#75715e&#34;&gt;##   events non_events event_rate&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## 1   1162       8838     0.1162&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;building-a-model&#34;&gt;Building a model&lt;/h2&gt;
&lt;p&gt;Next lets build a quick and dirty model, the output of which we will use to build the gains table.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Check out available features (not shown here for brevity)&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;colnames&lt;/span&gt;(sample)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ll need to do some data cleaning first.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Replace all NA values with a default value&lt;/span&gt;
sample&lt;span style=&#34;color:#a6e22e&#34;&gt;[is.na&lt;/span&gt;(sample)] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;

sample &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;lt;&amp;gt;%&lt;/span&gt; 
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# Remove cases where home ownership and payment plan are not reported&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt; home_ownership &lt;span style=&#34;color:#f92672&#34;&gt;%in%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NONE&amp;#34;&lt;/span&gt;),
         pymnt_plan &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# Convert these two variables into factors&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(home_ownership &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;factor&lt;/span&gt;(home_ownership), 
         pymnt_plan &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;factor&lt;/span&gt;(pymnt_plan))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Train Test split&lt;/span&gt;
idx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sample&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nrow&lt;/span&gt;(sample), size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nrow&lt;/span&gt;(sample), replace &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F)
train &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; sample[idx,]
test &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; sample[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;idx,]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dim&lt;/span&gt;(train)
&lt;span style=&#34;color:#75715e&#34;&gt;## [1] 6999  153&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;dim&lt;/span&gt;(test)
&lt;span style=&#34;color:#75715e&#34;&gt;## [1] 3000  153&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Using a GLM model for simplicity&lt;/span&gt;
mdl &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;glm&lt;/span&gt;(
  formula &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bad_flag &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; 
    loan_amnt &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; term &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; mths_since_last_delinq &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; total_pymnt &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
    home_ownership &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; acc_now_delinq &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
    inq_last_6mths &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; delinq_amnt &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
    mths_since_last_record &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; mths_since_recent_revol_delinq &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
    mths_since_last_major_derog &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; mths_since_recent_inq &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
    mths_since_recent_bc &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; num_accts_ever_120_pd,
  family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;binomial&amp;#34;&lt;/span&gt;, 
  data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; train
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;While we are at it, let&amp;rsquo;s also attach the model predictions to the test dataset.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;test&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;pred &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;predict&lt;/span&gt;(mdl, newdata &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; test)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;creating-the-gains-table&#34;&gt;Creating the Gains Table&lt;/h2&gt;
&lt;p&gt;The table has a few important components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bins in decreasing/increasing order of model output (probability/log odds/scores)&lt;/li&gt;
&lt;li&gt;Population percentages contained in each bin&lt;/li&gt;
&lt;li&gt;Observed event rates in each bin&lt;/li&gt;
&lt;li&gt;Cumulative events and non events distributions&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Discretise predictions based on quantiles&lt;/span&gt;
q &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;quantile&lt;/span&gt;(test&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;pred, probs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;seq&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, length.out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;))

&lt;span style=&#34;color:#75715e&#34;&gt;# Add bins to test dataset&lt;/span&gt;
test&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;bins &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cut&lt;/span&gt;(test&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;pred, breaks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; q, include.lowest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; T, right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; T, ordered_result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; T)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;flex items-center justify-center font-content-sans rounded bg-raven-100 px-4 py-4&#34; role=&#34;alert&#34;&gt;
  &lt;span class=&#34;text-xs font-bold uppercase leading-none rounded-full text-raven-100 bg-raven-500 px-2 py-1 mr-3&#34;&gt;info&lt;/span&gt;
  &lt;span class=&#34;font-semibold text-raven-700&#34;&gt;Note that the output from cut is arranged in increasing order of value&lt;/span&gt;
&lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;levels&lt;/span&gt;(test&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;bins)
&lt;span style=&#34;color:#75715e&#34;&gt;##  [1] &amp;#34;[-5.97,-3.35]&amp;#34; &amp;#34;(-3.35,-2.9]&amp;#34;  &amp;#34;(-2.9,-2.64]&amp;#34;  &amp;#34;(-2.64,-2.44]&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;##  [5] &amp;#34;(-2.44,-2.26]&amp;#34; &amp;#34;(-2.26,-2.1]&amp;#34;  &amp;#34;(-2.1,-1.9]&amp;#34;   &amp;#34;(-1.9,-1.65]&amp;#34; &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;##  [9] &amp;#34;(-1.65,-1.28]&amp;#34; &amp;#34;(-1.28,0.638]&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using the bins we created above, we can now start to put the table together&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Start with the test dataset and summarise&lt;/span&gt;
gains_table &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; test &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;group_by&lt;/span&gt;(bins) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;summarise&lt;/span&gt;(total &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;(), 
            events &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(bad_flag &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), 
            non_events &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(bad_flag &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At this point the table should look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;kable&lt;/span&gt;(gains_table)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;bins&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;total&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;events&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;non_events&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;[-5.97,-3.35]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;298&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-3.35,-2.9]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;15&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;285&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-2.9,-2.64]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;14&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;286&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-2.64,-2.44]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;19&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;281&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-2.44,-2.26]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;24&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;276&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-2.26,-2.1]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;38&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;262&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-2.1,-1.9]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;52&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;248&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-1.9,-1.65]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;56&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;244&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-1.65,-1.28]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;63&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;237&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-1.28,0.638]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;84&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;216&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Next, we&amp;rsquo;ll add the event rate columns. Let&amp;rsquo;s also make the table presentable - I&amp;rsquo;ll use the &lt;code&gt;percent()&lt;/code&gt; function in the &lt;code&gt;scales&lt;/code&gt; package to show numbers as percentages.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;gains_table &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;lt;&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(event_rate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;percent&lt;/span&gt;(events &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; total, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;))

&lt;span style=&#34;color:#a6e22e&#34;&gt;kable&lt;/span&gt;(gains_table)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;bins&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;total&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;events&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;non_events&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;event_rate&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;[-5.97,-3.35]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;298&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.7%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-3.35,-2.9]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;15&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;285&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;5.0%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-2.9,-2.64]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;14&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;286&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4.7%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-2.64,-2.44]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;19&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;281&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;6.3%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-2.44,-2.26]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;24&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;276&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8.0%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-2.26,-2.1]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;38&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;262&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;12.7%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-2.1,-1.9]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;52&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;248&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;17.3%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-1.9,-1.65]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;56&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;244&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;18.7%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-1.65,-1.28]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;63&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;237&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;21.0%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-1.28,0.638]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;84&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;216&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;28.0%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;To this we&amp;rsquo;ll add some columns quantifying how events and non events are distributed across each bin.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;gains_table &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;lt;&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(pop_pct &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;percent&lt;/span&gt;(total&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(total), &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;), 
         
         &lt;span style=&#34;color:#75715e&#34;&gt;# Not formatting these as percentages just yet&lt;/span&gt;
         c.events_pct &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cumsum&lt;/span&gt;(events) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(events),
         c.non_events_pct &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cumsum&lt;/span&gt;(non_events) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(non_events))

&lt;span style=&#34;color:#a6e22e&#34;&gt;kable&lt;/span&gt;(gains_table) 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;bins&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;total&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;events&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;non_events&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;event_rate&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;pop_pct&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;c.events_pct&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;c.non_events_pct&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;[-5.97,-3.35]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;298&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.7%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.0%&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.0054496&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.1131789&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-3.35,-2.9]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;15&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;285&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;5.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.0%&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.0463215&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.2214204&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-2.9,-2.64]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;14&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;286&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4.7%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.0%&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.0844687&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.3300418&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-2.64,-2.44]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;19&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;281&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;6.3%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.0%&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.1362398&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.4367641&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-2.44,-2.26]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;24&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;276&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.0%&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.2016349&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.5415875&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-2.26,-2.1]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;38&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;262&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;12.7%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.0%&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.3051771&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.6410938&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-2.1,-1.9]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;52&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;248&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;17.3%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.0%&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.4468665&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.7352829&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-1.9,-1.65]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;56&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;244&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;18.7%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.0%&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.5994550&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.8279529&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-1.65,-1.28]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;63&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;237&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;21.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.0%&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.7711172&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.9179643&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-1.28,0.638]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;84&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;216&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;28.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.0%&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;1.0000000&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;1.0000000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Almost done - just need a few more columns namely:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A column computing the difference between the two cumulative distribution columns we created previously. The maximum value of this column will become the primary performance metric known as the &lt;code&gt;KS statistic&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Two additional columns computing &lt;code&gt;event capture rates&lt;/code&gt; and &lt;code&gt;cumulative event rates&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;gains_table &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;lt;&amp;gt;%&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(ks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;round&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;abs&lt;/span&gt;(c.events_pct &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; c.non_events_pct), &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), 
         cap_rate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;percent&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cumsum&lt;/span&gt;(events)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(events), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;), 
         c_event_rate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;percent&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cumsum&lt;/span&gt;(events)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cumsum&lt;/span&gt;(total), &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;), 
         
         &lt;span style=&#34;color:#75715e&#34;&gt;# Format pending columns&lt;/span&gt;
         c.events_pct &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;percent&lt;/span&gt;(c.events_pct, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;),
         c.non_events_pct &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;percent&lt;/span&gt;(c.non_events_pct, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;))

&lt;span style=&#34;color:#a6e22e&#34;&gt;kable&lt;/span&gt;(gains_table)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;bins&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;total&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;events&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;non_events&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;event_rate&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;pop_pct&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;c.events_pct&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;c.non_events_pct&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;ks&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;cap_rate&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;c_event_rate&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;[-5.97,-3.35]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;298&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.7%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.5%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;11.3%&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.11&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.7%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-3.35,-2.9]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;15&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;285&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;5.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4.6%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;22.1%&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.18&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;5%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2.8%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-2.9,-2.64]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;14&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;286&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4.7%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8.4%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;33.0%&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.25&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3.4%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-2.64,-2.44]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;19&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;281&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;6.3%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;13.6%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;43.7%&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.30&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;14%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4.2%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-2.44,-2.26]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;24&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;276&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;20.2%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;54.2%&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.34&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;20%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4.9%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-2.26,-2.1]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;38&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;262&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;12.7%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;30.5%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;64.1%&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.34&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;31%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;6.2%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-2.1,-1.9]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;52&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;248&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;17.3%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;44.7%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;73.5%&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.29&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;45%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;7.8%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-1.9,-1.65]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;56&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;244&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;18.7%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;59.9%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;82.8%&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.23&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;60%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;9.2%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-1.65,-1.28]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;63&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;237&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;21.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;77.1%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;91.8%&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.15&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;77%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.5%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-1.28,0.638]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;84&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;216&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;28.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100.0%&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.00&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;12.2%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;creating-a-function&#34;&gt;Creating a function&lt;/h2&gt;
&lt;p&gt;Finally, we can encapsulate all of the above code in a single function. Note that we actually do not need the full test/train dataset, just the actual classes and predicted outcomes (log odds/probability/score).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;gains_table &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(act, pred, increasing &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; T, nBins &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;){
  
  q &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;quantile&lt;/span&gt;(pred, probs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;seq&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, length.out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nBins &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
  bins &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cut&lt;/span&gt;(pred, breaks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; q, include.lowest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; T, right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; T, ordered_result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; T)
  
  df &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(act, pred, bins)
  
  df &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
    
    &lt;span style=&#34;color:#a6e22e&#34;&gt;group_by&lt;/span&gt;(bins) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
    &lt;span style=&#34;color:#a6e22e&#34;&gt;summarise&lt;/span&gt;(total &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;(), 
              events &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(act &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), 
              non_events &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(act &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
    &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(event_rate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;percent&lt;/span&gt;(events &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; total, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# This odd looking format is to ensure that the if-else &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# condition is part of the dplyr chain&lt;/span&gt;
    {&lt;span style=&#34;color:#a6e22e&#34;&gt;if&lt;/span&gt;(increasing &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;){
      &lt;span style=&#34;color:#a6e22e&#34;&gt;arrange&lt;/span&gt;(., bins)
    }else{
      &lt;span style=&#34;color:#a6e22e&#34;&gt;arrange&lt;/span&gt;(., &lt;span style=&#34;color:#a6e22e&#34;&gt;desc&lt;/span&gt;(bins))
    }} &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; 
    
    &lt;span style=&#34;color:#a6e22e&#34;&gt;mutate&lt;/span&gt;(pop_pct &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;percent&lt;/span&gt;(total&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(total), &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;), 
           c.events_pct &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cumsum&lt;/span&gt;(events) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(events),
           c.non_events_pct &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cumsum&lt;/span&gt;(non_events) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(non_events), 
           ks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;round&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;abs&lt;/span&gt;(c.events_pct &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; c.non_events_pct), &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), 
           cap_rate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;percent&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cumsum&lt;/span&gt;(events)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(events), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;), 
           c_event_rate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;percent&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cumsum&lt;/span&gt;(events)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cumsum&lt;/span&gt;(total), &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;), 
           c.events_pct &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;percent&lt;/span&gt;(c.events_pct, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;),
           c.non_events_pct &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;percent&lt;/span&gt;(c.non_events_pct, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It is worth noting here that since the capture rate is being computed from &lt;strong&gt;top to bottom&lt;/strong&gt;, it is important that the table is arranged in an appropriate manner. That is, when modelling for &lt;code&gt;bads&lt;/code&gt;, the table should be arrange in &lt;strong&gt;descending&lt;/strong&gt; order of the model output (i.e. higher event rates at the top) and vice versa.&lt;/p&gt;
&lt;p&gt;Also, if you are planning on using this with &lt;code&gt;sparklyr&lt;/code&gt;, consider looking into the &lt;code&gt;ft_quantile_discretizer()&lt;/code&gt; function. It would replace &lt;code&gt;cut()&lt;/code&gt; here.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Test the function&lt;/span&gt;
tab &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gains_table&lt;/span&gt;(test&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;bad_flag, test&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;pred, F, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;kable&lt;/span&gt;(tab)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;bins&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;total&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;events&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;non_events&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;event_rate&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;pop_pct&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;c.events_pct&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;c.non_events_pct&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;ks&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;cap_rate&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;c_event_rate&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-1.28,0.638]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;84&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;216&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;28.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;22.9%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8.2%&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.15&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;23%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;28.0%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-1.65,-1.28]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;63&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;237&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;21.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;40.1%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;17.2%&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.23&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;40%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;24.5%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-1.9,-1.65]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;56&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;244&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;18.7%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;55.3%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;26.5%&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.29&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;55%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;22.6%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-2.1,-1.9]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;52&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;248&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;17.3%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;69.5%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;35.9%&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.34&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;69%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;21.2%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-2.26,-2.1]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;38&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;262&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;12.7%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;79.8%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;45.8%&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.34&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;80%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;19.5%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-2.44,-2.26]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;24&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;276&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;86.4%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;56.3%&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.30&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;86%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;17.6%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-2.64,-2.44]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;19&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;281&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;6.3%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;91.6%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;67.0%&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.25&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;92%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;16.0%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-2.9,-2.64]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;14&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;286&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4.7%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;95.4%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;77.9%&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.18&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;95%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;14.6%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(-3.35,-2.9]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;15&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;285&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;5.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;99.5%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;88.7%&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.11&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;99%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;13.5%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;[-5.97,-3.35]&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;298&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.7%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100.0%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100.0%&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.00&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;12.2%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;interpretation&#34;&gt;Interpretation&lt;/h2&gt;
&lt;p&gt;Some notes on how to interpret such a table:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Since scoring models aim to risk-rank borrowers, the first thing to look for is whether or not the event rates are consistently increasing  (or decreasing) across bins. If not, when using the actual model, one might not be able to confidently conclude if borrower A is better (or worse) than borrower B.&lt;/li&gt;
&lt;li&gt;If bin sizes are not consistent (in this case ~10%) it would imply that the model is assigning the same output/score to a lot of borrowers (clumping). This could pose issues later on (say when deciding cutoffs). The ideal solution is to add additional variables that can help differentiate between good and bad borrowers.&lt;/li&gt;
&lt;li&gt;While the ideal cutoff would be the bin where the &lt;code&gt;KS&lt;/code&gt; statistic is at its maximum, additional aspects like capture rates and approval rates should be taken into account.&lt;/li&gt;
&lt;li&gt;Typically, analysts would look for a model which achieves the maximum value of the &lt;code&gt;KS&lt;/code&gt; statistic within the first 2/3 deciles. That way, when creating underwriting policies, you would only end up rejecting 20%-30% of the applicant pool.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Thoughts? Comments? Helpful? Not helpful? Like to see anything else added in here? Let me know!&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://rtichoke.netlify.app/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rtichoke.netlify.app/about/</guid>
      <description>&lt;h1 id=&#34;about-me&#34;&gt;About me&lt;/h1&gt;
&lt;p&gt;Hi 👋, thanks for visiting!&lt;/p&gt;
&lt;p&gt;I am an avid &lt;code&gt;R&lt;/code&gt; user and I sometimes write about &lt;code&gt;R&lt;/code&gt; and how to use it for analytics.&lt;/p&gt;
&lt;p&gt;&lt;small&gt; Built with ❤️ using &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;, &lt;a href=&#34;https://github.com/marketempower/axiom&#34;&gt;Axiom&lt;/a&gt;,   &lt;a href=&#34;https://www.netlify.com/&#34;&gt;Netlify&lt;/a&gt;, &lt;a href=&#34;https://www.rstudio.com/&#34;&gt;RStudio&lt;/a&gt; and &lt;a href=&#34;https://bookdown.org/yihui/blogdown/&#34;&gt;Blogdown&lt;/a&gt;
&lt;/small&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://rtichoke.netlify.app/rbloggers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rtichoke.netlify.app/rbloggers/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.r-bloggers.com/&#34;&gt;R-Bloggers&lt;/a&gt; is a blog aggregator for blogs that showcase &lt;code&gt;R&lt;/code&gt; related content.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
