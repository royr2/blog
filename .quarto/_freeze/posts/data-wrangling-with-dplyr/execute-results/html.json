{
  "hash": "007454fd2d1a223bd74968668e14e614",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Wrangling with dplyr\"\ndate: \"2025-03-30\"\ncategories: [R, Data Manipulation, dplyr]\nimage: \"../images/dplyr.png\"\nexecute:\n  echo: true\n  warning: false\n  message: false\n  eval: false\n---\n\n\n\n\n# Mastering Data Manipulation with dplyr\n\nThe `dplyr` package is part of the tidyverse and provides a grammar for data manipulation in R. This post will demonstrate some essential data wrangling techniques using built-in datasets.\n\n## Setup\n\nFirst, let's load the necessary packages:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(knitr)\n```\n:::\n\n\n\n\n## Working with the mtcars Dataset\n\nWe'll use the built-in `mtcars` dataset for our examples:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Look at the mtcars data\nglimpse(mtcars)\n```\n:::\n\n\n\n\n## Basic dplyr Functions\n\n### Filtering Rows\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find all cars with 6 cylinders\nsix_cyl <- mtcars %>% \n  filter(cyl == 6)\n\n# Show the first few rows\nhead(six_cyl) %>%\n  kable()\n```\n:::\n\n\n\n\n### Selecting Columns\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select only specific columns\ncar_data <- mtcars %>% \n  select(mpg, cyl, hp, wt)\n\nhead(car_data) %>%\n  kable()\n```\n:::\n\n\n\n\n### Arranging Rows\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find the cars with best fuel efficiency\nmost_efficient <- mtcars %>% \n  arrange(desc(mpg)) %>%\n  select(mpg, cyl, hp, wt)\n\nhead(most_efficient) %>%\n  kable()\n```\n:::\n\n\n\n\n### Creating New Variables\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate power-to-weight ratio\ncar_stats <- mtcars %>% \n  mutate(\n    power_to_weight = hp / wt,\n    efficiency_score = mpg * (1/wt)\n  ) %>%\n  select(mpg, hp, wt, power_to_weight, efficiency_score)\n\nhead(car_stats) %>%\n  kable()\n```\n:::\n\n\n\n\n### Summarizing Data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate average stats by cylinder count\ncyl_stats <- mtcars %>% \n  group_by(cyl) %>%\n  summarize(\n    avg_mpg = mean(mpg),\n    avg_hp = mean(hp),\n    count = n()\n  ) %>%\n  arrange(cyl)\n\ncyl_stats %>%\n  kable()\n```\n:::\n\n\n\n\n## Visualizing the Results\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot average mpg by cylinder count\nggplot(cyl_stats, aes(x = factor(cyl), y = avg_mpg)) +\n  geom_col(aes(fill = avg_hp)) +\n  geom_text(aes(label = round(avg_mpg, 1)), vjust = -0.5) +\n  scale_fill_viridis_c() +\n  labs(\n    title = \"Average Fuel Efficiency by Cylinder Count\",\n    subtitle = \"Color indicates average horsepower\",\n    x = \"Number of Cylinders\",\n    y = \"Average MPG\",\n    fill = \"Avg. Horsepower\"\n  ) +\n  theme_minimal()\n```\n:::\n\n\n\n\n## Working with the iris Dataset\n\nLet's also explore another built-in dataset, `iris`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Look at the iris data\nglimpse(iris)\n```\n:::\n\n\n\n\n### Filtering and Grouping\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate average measurements by species\niris_stats <- iris %>%\n  group_by(Species) %>%\n  summarize(\n    avg_sepal_length = mean(Sepal.Length),\n    avg_sepal_width = mean(Sepal.Width),\n    avg_petal_length = mean(Petal.Length),\n    avg_petal_width = mean(Petal.Width),\n    count = n()\n  )\n\niris_stats %>%\n  kable()\n```\n:::\n\n\n\n\n### Visualizing Iris Data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a scatter plot with multiple dimensions\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +\n  geom_point(size = 3, alpha = 0.7) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  labs(\n    title = \"Iris Dataset: Sepal Dimensions by Species\",\n    x = \"Sepal Length (cm)\",\n    y = \"Sepal Width (cm)\"\n  ) +\n  theme_minimal() +\n  facet_wrap(~Species)\n```\n:::\n\n\n\n\n## Conclusion\n\nThe `dplyr` package provides a consistent and intuitive way to manipulate data in R. By mastering these basic functions, you'll be well on your way to efficient data analysis workflows.\n\nIn the next post, we'll explore how to combine these techniques with other packages in the tidyverse for even more powerful data analysis.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}