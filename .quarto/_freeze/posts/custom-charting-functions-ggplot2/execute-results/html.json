{
  "hash": "cbe1395291610212c5051b4097d57b3a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Custom Charting Functions Using ggplot2\"\ndate: \"2024-05-14\"\ncategories: [R, Data Visualization, ggplot2]\nimage: \"../images/custom_charts.png\"\nexecute:\n  echo: true\n  warning: false\n  message: false\n  eval: true\n---\n\n\n\nWhile R has a variety of options for 2D graphics and data visualization, it's hard to beat `ggplot2` in terms of features, functionality, and overall visual quality. This post demonstrates how to create customized charting functions for specific chart types using `ggplot2` as the underlying visualization engine.\n\n## Required Libraries\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load required packages\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(scales)\nlibrary(stringr)\n```\n:::\n\n\n\n## Sample Dataset\n\nFor this demonstration, we'll use a summarized version of the COVID-19 Data Repository hosted by [Johns Hopkins University](https://github.com/CSSEGISandData/COVID-19).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load COVID-19 data\ndf <- read.csv(\"https://bit.ly/3G8G63u\")\n\n# Get top 5 countries by death count\ntop_countries <- df %>% \n  group_by(country) %>% \n  summarise(count = sum(deaths_daily)) %>% \n  top_n(5) %>% \n  .$country\n\nprint(top_countries)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Brazil\" \"India\"  \"Mexico\" \"Russia\" \"US\"    \n```\n\n\n:::\n:::\n\n\n\nLet's prepare our data for visualization by creating a 7-day moving average of daily confirmed cases for the top five countries:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a data frame with the required information\n# Note that a centered 7-day moving average is used\nplotdf <- df %>% \n  mutate(date = as.Date(date, format = \"%m/%d/%Y\")) %>% \n  filter(country %in% top_countries) %>% \n  group_by(country, date) %>% \n  summarise(count = sum(confirmed_daily)) %>%\n  arrange(country, date) %>% \n  group_by(country) %>% \n  mutate(MA = zoo::rollapply(count, FUN = mean, width = 7, by = 1, fill = NA, align = \"center\"))\n```\n:::\n\n\n\n## Building a Simple Line Chart Function\n\nLet's start by creating a basic line chart function. Note the use of `aes_string()` instead of just `aes()`. This allows us to supply arguments to `ggplot2` as strings, making our function more flexible.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function definition\nline_chart <- function(df, \n                       x, \n                       y, \n                       group_color = NULL, \n                       line_width = 1, \n                       line_type = 1){\n  \n  ggplot(df, aes(x = !! sym(x), \n                 y = !! sym(y), \n                 color = !! sym(group_color))) + \n    geom_line(linewidth = line_width, \n              linetype = line_type)\n}\n\n# Test run\nline_chart(plotdf,\n           x = \"date\",\n           y = \"MA\",\n           group_color = \"country\", \n           line_type = 1, \n           line_width = 1.2)\n```\n\n::: {.cell-output-display}\n![](custom-charting-functions-ggplot2_files/figure-html/line-chart-basic-1.png){width=672}\n:::\n:::\n\n\n\n## Creating a Custom Theme\n\nNow that we know how to encapsulate the call to `ggplot2` in a more intuitive manner, we can create a customized theme for our charts. This is useful since this theme can be applied to any chart.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncustom_theme <- function(plt, \n                         base_size = 11, \n                         base_line_size = 1, \n                         palette = \"Set1\"){\n  \n  # Note the use of \"+\" and not \"%>%\"\n  plt + \n    # Adjust overall font size\n    theme_minimal(base_size = base_size, \n                  base_line_size = base_line_size) + \n    \n    # Put legend at the bottom\n    theme(legend.position = \"bottom\") + \n    \n    # Different colour scale\n    scale_color_brewer(palette = palette)\n}\n\n# Test run\nline_chart(plotdf, \"date\", \"MA\", \"country\") %>% custom_theme()\n```\n\n::: {.cell-output-display}\n![](custom-charting-functions-ggplot2_files/figure-html/custom-theme-basic-1.png){width=672}\n:::\n:::\n\n\n\n## Enhancing Our Functions\n\nLet's add more features to our `line_chart()` function to make it more versatile:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nline_chart <- function(df, \n                       x, y, \n                       group_color = NULL, \n                       line_width = 1, \n                       line_type = 1, \n                       xlab = NULL, \n                       ylab = NULL, \n                       title = NULL, \n                       subtitle = NULL, \n                       caption = NULL){\n  # Base plot\n  ggplot(df, aes(x = !! sym(x), \n                 y = !! sym(y), \n                 color = !! sym(group_color))) + \n    \n    # Line chart \n    geom_line(size = line_width, \n              linetype = line_type) + \n    \n    # Titles and subtitles\n    labs(x = xlab, \n         y = ylab, \n         title = title, \n         subtitle = subtitle, \n         caption = caption)\n}\n```\n:::\n\n\n\nWe'll also enhance our `custom_theme()` function to handle different axis formatting options:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncustom_theme <- function(plt, \n                         palette = \"Set1\", \n                         format_x_axis_as = NULL, \n                         format_y_axis_as = NULL, \n                         x_axis_scale = 1, \n                         y_axis_scale = 1, \n                         x_axis_text_size = 10, \n                         y_axis_text_size = 10, \n                         base_size = 11, \n                         base_line_size = 1, \n                         x_angle = 45){\n  \n  mappings <- names(unlist(plt$mapping))\n  \n  p <- plt + \n    \n    # Adjust overall font size\n    theme_minimal(base_size = base_size, \n                  base_line_size = base_line_size) + \n    \n    # Put legend at the bottom\n    theme(legend.position = \"bottom\", \n          axis.text.x = element_text(angle = x_angle)) + \n    \n    # Different colour palette\n    {if(\"colour\" %in% mappings) scale_color_brewer(palette = palette)}+\n    \n    {if(\"fill\" %in% mappings) scale_fill_brewer(palette = palette)}+\n    \n    # Change some theme options\n    theme(plot.background = element_rect(fill = \"#f7f7f7\"), \n          plot.subtitle = element_text(face = \"italic\"), \n          axis.title.x = element_text(face = \"bold\", \n                                      size = x_axis_text_size), \n          axis.title.y = element_text(face = \"bold\", \n                                      size = y_axis_text_size)) + \n    \n    # Change x-axis formatting\n    {if(!is.null(format_x_axis_as))\n      switch(format_x_axis_as, \n             \"date\" = scale_x_date(breaks = pretty_breaks(n = 12)), \n             \"number\" = scale_x_continuous(labels = number_format(accuracy = 0.1, \n                                                                  decimal.mark = \",\", \n                                                                  scale = x_axis_scale)), \n             \"percent\" = scale_x_continuous(labels = percent))} + \n    \n    # Change y-axis formatting\n    {if(!is.null(format_y_axis_as))\n      \n      switch(format_y_axis_as, \n             \"date\" = scale_y_date(breaks = pretty_breaks(n = 12)), \n             \"number\" = scale_y_continuous(labels = number_format(accuracy = 0.1, \n                                                                  decimal.mark = \",\", \n                                                                  scale = y_axis_scale)), \n             \"percent\" = scale_y_continuous(labels = percent))}\n  \n  # Capitalise all names\n  vec <- lapply(p$labels, str_to_title)\n  names(vec) <- names(p$labels)\n  p$labels <- vec\n  \n  return(p)\n}\n```\n:::\n\n\n\n## Putting It All Together\n\nNow let's see how our enhanced functions work together to create a polished visualization:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nline_chart(plotdf,\n           x = \"date\", \n           y = \"MA\", \n           group_color = \"country\", \n           xlab = \"Date\", \n           ylab = \"Moving Avg. (in '000)\", \n           title = \"Daily COVID19 Case Load\", \n           subtitle = \"Top 5 countries by volume\") %>% \n  \n  custom_theme(format_x_axis_as = \"date\", \n               format_y_axis_as = \"number\", \n               y_axis_scale = 0.001)\n```\n\n::: {.cell-output-display}\n![](custom-charting-functions-ggplot2_files/figure-html/final-line-chart-1.png){width=672}\n:::\n:::\n\n\n\n## Applying the Custom Theme to Other Chart Types\n\nThe beauty of our `custom_theme()` function is that it can be applied to any `ggplot2` object. Let's create a bar chart to demonstrate this flexibility:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- plotdf %>%  \n  mutate(month = format(date, \"%m-%b\")) %>% \n  ggplot(aes(x = month, y = MA, fill = country)) + \n  geom_col(position = \"dodge\") + \n  labs(title = \"Monthly COVID19 Case load trend\", \n       subtitle = \"Top 5 countries\", \n       x = \"Month\", \n       y = \"Moving Average ('000)\")\n\ncustom_theme(p, \n             palette = \"Set2\", \n             format_y_axis_as = \"number\", \n             y_axis_scale = 0.001)\n```\n\n::: {.cell-output-display}\n![](custom-charting-functions-ggplot2_files/figure-html/bar-chart-1.png){width=672}\n:::\n:::\n\n\n\n## Benefits of Custom Charting Functions\n\nCreating custom charting functions with ggplot2 offers several advantages:\n\n1. **Consistency**: Ensures all charts in your reports or dashboards have a consistent look and feel.\n\n2. **Efficiency**: Reduces the amount of code you need to write for commonly used chart types.\n\n3. **Maintainability**: Makes it easier to update the style of all charts by modifying a single function.\n\n4. **Simplicity**: Abstracts away the complexity of ggplot2 for team members who may not be as familiar with the package.\n\n## When to Use Custom Functions vs. Direct ggplot2\n\nIt's worth noting that building customized charting functions using `ggplot2` is most useful when you need to create the same type of chart(s) repeatedly. When doing exploratory work, using `ggplot2` directly is often easier and more flexible since you can build all kinds of charts (or layer different chart types) within the same pipeline.",
    "supporting": [
      "custom-charting-functions-ggplot2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}