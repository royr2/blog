{"title":"Measuring Model Performance Using a Gains Table","markdown":{"yaml":{"title":"Measuring Model Performance Using a Gains Table","date":"2024-01-28","categories":["R","Credit Risk Analytics","Model Evaluation"],"image":"../images/gains.png","execute":{"echo":true,"warning":false,"message":false,"eval":true}},"headingText":"Measuring Model Performance Using a Gains Table","containsRefs":false,"markdown":"\n\n\nIn credit risk modeling, analysts often use a tool called a **gains table** (or KS table) to measure and quantify the performance of classification models. This post explores how to build and interpret such a table using R.\n\n## What is a Gains Table?\n\nA gains table discretizes the population (typically a test or validation set) into groups based on the model's output (probability, log odds, or scores). Usually, each group represents 10% of the total population (deciles). The table then presents summary statistics for each group and analyzes the cumulative distributions of events (defaults) and non-events to quantify the model's performance.\n\n## Required Libraries\n\n```{r}\n#| label: setup\n\n# Load required packages\nlibrary(dplyr)\nlibrary(magrittr)\nlibrary(knitr)\nlibrary(scales)\n```\n\n## Sample Dataset\n\nWe'll use a sample from the Lending Club dataset, which contains information about loans and their outcomes.\n\n```{r}\n#| label: data-load\n\n# Load the sample data\nsample <- read.csv(\"https://bit.ly/42ypcnJ\")\n\n# Check dimensions\ndim(sample)\n```\n\n## Defining the Target Variable\n\nFirst, we need to create a target (outcome) variable to model. Since this is a credit risk use case, we'll identify borrowers who defaulted on their payments.\n\n```{r}\n#| label: target-definition\n\n# Check unique loan statuses\nunique(sample$loan_status)\n\n# Define \"bad\" loans as those that are charged off\ncodes <- c(\"Charged Off\", \"Does not meet the credit policy. Status:Charged Off\")\n\n# Create a binary flag for defaults\nsample %<>% mutate(bad_flag = ifelse(loan_status %in% codes, 1, 0))\n\n# Check overall event rates\nsample %>% \n  summarise(events = sum(bad_flag == 1), \n            non_events = sum(bad_flag == 0)) %>% \n  mutate(event_rate = events/(events + non_events))\n```\n\n## Building a Simple Model\n\nNext, let's build a quick model, the output of which we'll use to create the gains table.\n\n```{r}\n#| label: data-prep\n\n# Replace NA values with a default value\nsample[is.na(sample)] <- -1\n\n# Clean the data\nsample %<>% \n  # Remove cases where home ownership and payment plan are not reported\n  filter(!home_ownership %in% c(\"\", \"NONE\"),\n         pymnt_plan != \"\") %>% \n  # Convert categorical variables to factors\n  mutate(home_ownership = factor(home_ownership), \n         pymnt_plan = factor(pymnt_plan))\n\n# Train-test split (70-30)\nidx <- sample(1:nrow(sample), size = 0.7 * nrow(sample), replace = FALSE)\ntrain <- sample[idx,]\ntest <- sample[-idx,]\n```\n\n```{r}\n#| label: model-building\n\n# Build a logistic regression model\nmdl <- glm(\n  formula = bad_flag ~ \n    loan_amnt + term + mths_since_last_delinq + total_pymnt + \n    home_ownership + acc_now_delinq + \n    inq_last_6mths + delinq_amnt + \n    mths_since_last_record + mths_since_recent_revol_delinq + \n    mths_since_last_major_derog + mths_since_recent_inq + \n    mths_since_recent_bc + num_accts_ever_120_pd,\n  family = \"binomial\", \n  data = train\n)\n\n# Generate predictions on the test set\ntest$pred <- predict(mdl, newdata = test)\n```\n\n## Creating the Gains Table\n\nNow let's build the gains table step by step:\n\n### Step 1: Discretize Predictions into Bins\n\n```{r}\n#| label: binning\n\n# Create deciles based on model predictions\nq <- quantile(test$pred, probs = seq(0, 1, length.out = 11))\n\n# Add bins to test dataset\ntest$bins <- cut(test$pred, breaks = q, include.lowest = TRUE, \n                right = TRUE, ordered_result = TRUE)\n\n# Check the bin levels (note they're in increasing order)\nlevels(test$bins)\n```\n\n### Step 2: Calculate Basic Statistics for Each Bin\n\n```{r}\n#| label: basic-stats\n\n# Create initial gains table with counts\ngains_table <- test %>% \n  group_by(bins) %>% \n  summarise(total = n(), \n            events = sum(bad_flag == 1), \n            non_events = sum(bad_flag == 0))\n\n# Add event rate column\ngains_table %<>%\n  mutate(event_rate = percent(events / total, 0.1, 100))\n\n# Display the table\nkable(gains_table)\n```\n\n### Step 3: Add Distribution Metrics\n\n```{r}\n#| label: distribution-metrics\n\n# Add population percentage and cumulative distributions\ngains_table %<>%\n  mutate(pop_pct = percent(total/sum(total), 0.1, 100), \n         \n         # Calculate cumulative percentages\n         c.events_pct = cumsum(events) / sum(events),\n         c.non_events_pct = cumsum(non_events) / sum(non_events))\n\n# Display the updated table\nkable(gains_table)\n```\n\n### Step 4: Add Performance Metrics\n\n```{r}\n#| label: performance-metrics\n\n# Add KS statistic, capture rate, and cumulative event rate\ngains_table %<>%\n  mutate(\n    # KS statistic (difference between cumulative distributions)\n    ks = round(abs(c.events_pct - c.non_events_pct), 2), \n    \n    # Capture rate (percentage of total events captured)\n    cap_rate = percent(cumsum(events)/sum(events), 1, 100), \n    \n    # Cumulative event rate\n    c_event_rate = percent(cumsum(events)/cumsum(total), 0.1, 100), \n    \n    # Format percentage columns\n    c.events_pct = percent(c.events_pct, 0.1, 100),\n    c.non_events_pct = percent(c.non_events_pct, 0.1, 100))\n\n# Display the final table\nkable(gains_table)\n```\n\n## Creating a Reusable Function\n\nLet's encapsulate all the above steps into a single function that can be reused for any binary classification model:\n\n```{r}\n#| label: gains-function\n\ngains_table <- function(act, pred, increasing = TRUE, nBins = 10) {\n  \n  # Create bins based on predictions\n  q <- quantile(pred, probs = seq(0, 1, length.out = nBins + 1))\n  bins <- cut(pred, breaks = q, include.lowest = TRUE, right = TRUE, ordered_result = TRUE)\n  \n  df <- data.frame(act, pred, bins)\n  \n  df %>% \n    # Group by bins and calculate statistics\n    group_by(bins) %>% \n    summarise(total = n(), \n              events = sum(act == 1), \n              non_events = sum(act == 0)) %>% \n    mutate(event_rate = percent(events / total, 0.1, 100)) %>% \n    \n    # Sort the table based on the 'increasing' parameter\n    {if(increasing == TRUE) {\n      arrange(., bins)\n    } else {\n      arrange(., desc(bins))\n    }} %>% \n    \n    # Add all performance metrics\n    mutate(pop_pct = percent(total/sum(total), 0.1, 100), \n           c.events_pct = cumsum(events) / sum(events),\n           c.non_events_pct = cumsum(non_events) / sum(non_events), \n           ks = round(abs(c.events_pct - c.non_events_pct), 2), \n           cap_rate = percent(cumsum(events)/sum(events), 1, 100), \n           c_event_rate = percent(cumsum(events)/cumsum(total), 0.1, 100), \n           c.events_pct = percent(c.events_pct, 0.1, 100),\n           c.non_events_pct = percent(c.non_events_pct, 0.1, 100))\n}\n```\n\n### Using the Function\n\n```{r}\n#| label: function-demo\n\n# Generate a gains table with bins in descending order\ntab <- gains_table(test$bad_flag, test$pred, FALSE, 10)\nkable(tab)\n```\n\n## Interpreting the Gains Table\n\nA gains table provides several key insights into model performance:\n\n1. **Monotonicity**: The event rates should consistently increase (or decrease) across bins. This confirms that the model effectively rank-orders risk.\n\n2. **Bin Consistency**: If bin sizes are not consistent (ideally ~10% each), it suggests the model is assigning the same output/score to many borrowers (clumping), which could pose issues when deciding cutoffs.\n\n3. **KS Statistic**: The maximum value of the KS column indicates the model's discriminatory power. A higher value (closer to 1) indicates better separation between good and bad borrowers.\n\n4. **Capture Rate**: Shows what percentage of all bad accounts are captured at each cutoff point.\n\n5. **Cumulative Event Rate**: Indicates the bad rate among all accounts up to that bin, useful for setting approval thresholds.\n\n## Practical Applications\n\nIn credit risk management, the gains table helps with:\n\n1. **Setting Cutoffs**: Identifying appropriate score thresholds for approving or rejecting applications.\n\n2. **Strategy Development**: Creating tiered strategies (e.g., approve, review, decline) based on risk levels.\n\n3. **Performance Monitoring**: Tracking model performance over time by comparing actual vs. expected distributions.\n\n4. **Model Comparison**: Evaluating different models by comparing their KS statistics and capture rates.\n\nThe gains table is a powerful tool for evaluating binary classification models, especially in credit risk applications. By providing a structured view of how well a model separates good and bad cases across the score distribution, it helps analysts make informed decisions about model quality and operational implementation.","srcMarkdownNoYaml":"\n\n# Measuring Model Performance Using a Gains Table\n\nIn credit risk modeling, analysts often use a tool called a **gains table** (or KS table) to measure and quantify the performance of classification models. This post explores how to build and interpret such a table using R.\n\n## What is a Gains Table?\n\nA gains table discretizes the population (typically a test or validation set) into groups based on the model's output (probability, log odds, or scores). Usually, each group represents 10% of the total population (deciles). The table then presents summary statistics for each group and analyzes the cumulative distributions of events (defaults) and non-events to quantify the model's performance.\n\n## Required Libraries\n\n```{r}\n#| label: setup\n\n# Load required packages\nlibrary(dplyr)\nlibrary(magrittr)\nlibrary(knitr)\nlibrary(scales)\n```\n\n## Sample Dataset\n\nWe'll use a sample from the Lending Club dataset, which contains information about loans and their outcomes.\n\n```{r}\n#| label: data-load\n\n# Load the sample data\nsample <- read.csv(\"https://bit.ly/42ypcnJ\")\n\n# Check dimensions\ndim(sample)\n```\n\n## Defining the Target Variable\n\nFirst, we need to create a target (outcome) variable to model. Since this is a credit risk use case, we'll identify borrowers who defaulted on their payments.\n\n```{r}\n#| label: target-definition\n\n# Check unique loan statuses\nunique(sample$loan_status)\n\n# Define \"bad\" loans as those that are charged off\ncodes <- c(\"Charged Off\", \"Does not meet the credit policy. Status:Charged Off\")\n\n# Create a binary flag for defaults\nsample %<>% mutate(bad_flag = ifelse(loan_status %in% codes, 1, 0))\n\n# Check overall event rates\nsample %>% \n  summarise(events = sum(bad_flag == 1), \n            non_events = sum(bad_flag == 0)) %>% \n  mutate(event_rate = events/(events + non_events))\n```\n\n## Building a Simple Model\n\nNext, let's build a quick model, the output of which we'll use to create the gains table.\n\n```{r}\n#| label: data-prep\n\n# Replace NA values with a default value\nsample[is.na(sample)] <- -1\n\n# Clean the data\nsample %<>% \n  # Remove cases where home ownership and payment plan are not reported\n  filter(!home_ownership %in% c(\"\", \"NONE\"),\n         pymnt_plan != \"\") %>% \n  # Convert categorical variables to factors\n  mutate(home_ownership = factor(home_ownership), \n         pymnt_plan = factor(pymnt_plan))\n\n# Train-test split (70-30)\nidx <- sample(1:nrow(sample), size = 0.7 * nrow(sample), replace = FALSE)\ntrain <- sample[idx,]\ntest <- sample[-idx,]\n```\n\n```{r}\n#| label: model-building\n\n# Build a logistic regression model\nmdl <- glm(\n  formula = bad_flag ~ \n    loan_amnt + term + mths_since_last_delinq + total_pymnt + \n    home_ownership + acc_now_delinq + \n    inq_last_6mths + delinq_amnt + \n    mths_since_last_record + mths_since_recent_revol_delinq + \n    mths_since_last_major_derog + mths_since_recent_inq + \n    mths_since_recent_bc + num_accts_ever_120_pd,\n  family = \"binomial\", \n  data = train\n)\n\n# Generate predictions on the test set\ntest$pred <- predict(mdl, newdata = test)\n```\n\n## Creating the Gains Table\n\nNow let's build the gains table step by step:\n\n### Step 1: Discretize Predictions into Bins\n\n```{r}\n#| label: binning\n\n# Create deciles based on model predictions\nq <- quantile(test$pred, probs = seq(0, 1, length.out = 11))\n\n# Add bins to test dataset\ntest$bins <- cut(test$pred, breaks = q, include.lowest = TRUE, \n                right = TRUE, ordered_result = TRUE)\n\n# Check the bin levels (note they're in increasing order)\nlevels(test$bins)\n```\n\n### Step 2: Calculate Basic Statistics for Each Bin\n\n```{r}\n#| label: basic-stats\n\n# Create initial gains table with counts\ngains_table <- test %>% \n  group_by(bins) %>% \n  summarise(total = n(), \n            events = sum(bad_flag == 1), \n            non_events = sum(bad_flag == 0))\n\n# Add event rate column\ngains_table %<>%\n  mutate(event_rate = percent(events / total, 0.1, 100))\n\n# Display the table\nkable(gains_table)\n```\n\n### Step 3: Add Distribution Metrics\n\n```{r}\n#| label: distribution-metrics\n\n# Add population percentage and cumulative distributions\ngains_table %<>%\n  mutate(pop_pct = percent(total/sum(total), 0.1, 100), \n         \n         # Calculate cumulative percentages\n         c.events_pct = cumsum(events) / sum(events),\n         c.non_events_pct = cumsum(non_events) / sum(non_events))\n\n# Display the updated table\nkable(gains_table)\n```\n\n### Step 4: Add Performance Metrics\n\n```{r}\n#| label: performance-metrics\n\n# Add KS statistic, capture rate, and cumulative event rate\ngains_table %<>%\n  mutate(\n    # KS statistic (difference between cumulative distributions)\n    ks = round(abs(c.events_pct - c.non_events_pct), 2), \n    \n    # Capture rate (percentage of total events captured)\n    cap_rate = percent(cumsum(events)/sum(events), 1, 100), \n    \n    # Cumulative event rate\n    c_event_rate = percent(cumsum(events)/cumsum(total), 0.1, 100), \n    \n    # Format percentage columns\n    c.events_pct = percent(c.events_pct, 0.1, 100),\n    c.non_events_pct = percent(c.non_events_pct, 0.1, 100))\n\n# Display the final table\nkable(gains_table)\n```\n\n## Creating a Reusable Function\n\nLet's encapsulate all the above steps into a single function that can be reused for any binary classification model:\n\n```{r}\n#| label: gains-function\n\ngains_table <- function(act, pred, increasing = TRUE, nBins = 10) {\n  \n  # Create bins based on predictions\n  q <- quantile(pred, probs = seq(0, 1, length.out = nBins + 1))\n  bins <- cut(pred, breaks = q, include.lowest = TRUE, right = TRUE, ordered_result = TRUE)\n  \n  df <- data.frame(act, pred, bins)\n  \n  df %>% \n    # Group by bins and calculate statistics\n    group_by(bins) %>% \n    summarise(total = n(), \n              events = sum(act == 1), \n              non_events = sum(act == 0)) %>% \n    mutate(event_rate = percent(events / total, 0.1, 100)) %>% \n    \n    # Sort the table based on the 'increasing' parameter\n    {if(increasing == TRUE) {\n      arrange(., bins)\n    } else {\n      arrange(., desc(bins))\n    }} %>% \n    \n    # Add all performance metrics\n    mutate(pop_pct = percent(total/sum(total), 0.1, 100), \n           c.events_pct = cumsum(events) / sum(events),\n           c.non_events_pct = cumsum(non_events) / sum(non_events), \n           ks = round(abs(c.events_pct - c.non_events_pct), 2), \n           cap_rate = percent(cumsum(events)/sum(events), 1, 100), \n           c_event_rate = percent(cumsum(events)/cumsum(total), 0.1, 100), \n           c.events_pct = percent(c.events_pct, 0.1, 100),\n           c.non_events_pct = percent(c.non_events_pct, 0.1, 100))\n}\n```\n\n### Using the Function\n\n```{r}\n#| label: function-demo\n\n# Generate a gains table with bins in descending order\ntab <- gains_table(test$bad_flag, test$pred, FALSE, 10)\nkable(tab)\n```\n\n## Interpreting the Gains Table\n\nA gains table provides several key insights into model performance:\n\n1. **Monotonicity**: The event rates should consistently increase (or decrease) across bins. This confirms that the model effectively rank-orders risk.\n\n2. **Bin Consistency**: If bin sizes are not consistent (ideally ~10% each), it suggests the model is assigning the same output/score to many borrowers (clumping), which could pose issues when deciding cutoffs.\n\n3. **KS Statistic**: The maximum value of the KS column indicates the model's discriminatory power. A higher value (closer to 1) indicates better separation between good and bad borrowers.\n\n4. **Capture Rate**: Shows what percentage of all bad accounts are captured at each cutoff point.\n\n5. **Cumulative Event Rate**: Indicates the bad rate among all accounts up to that bin, useful for setting approval thresholds.\n\n## Practical Applications\n\nIn credit risk management, the gains table helps with:\n\n1. **Setting Cutoffs**: Identifying appropriate score thresholds for approving or rejecting applications.\n\n2. **Strategy Development**: Creating tiered strategies (e.g., approve, review, decline) based on risk levels.\n\n3. **Performance Monitoring**: Tracking model performance over time by comparing actual vs. expected distributions.\n\n4. **Model Comparison**: Evaluating different models by comparing their KS statistics and capture rates.\n\nThe gains table is a powerful tool for evaluating binary classification models, especially in credit risk applications. By providing a structured view of how well a model separates good and bad cases across the score distribution, it helps analysts make informed decisions about model quality and operational implementation."},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","highlight-style":"zenburn","toc":true,"css":["../styles.css"],"output-file":"measuring-model-performance-gains-table.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","editor":"source","theme":"sketchy","code-copy":true,"title":"Measuring Model Performance Using a Gains Table","date":"2024-01-28","categories":["R","Credit Risk Analytics","Model Evaluation"],"image":"../images/gains.png"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}