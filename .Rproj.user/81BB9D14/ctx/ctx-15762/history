blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
knitr::opts_chunk$set(collapse = TRUE)
load("/Github/royr2/download/accepted_base.rda")
dim(accepted_base)
load("https://github.com/royr2/datasets/blob/main/accepted_base.rda")
file <- download.file("https://github.com/royr2/datasets/blob/main/accepted_base.rda", "sample.rda")
getwd()
download.file("https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/royr2/datasets/blob/main/accepted_base.rda", destfile = "sample.rda")
load("https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/royr2/datasets/blob/main/accepted_base.rda")
get("https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/royr2/datasets/blob/main/accepted_base.rda")
file.download("https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/royr2/datasets/blob/main/accepted_base.rda")
download.file("https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/royr2/datasets/blob/main/accepted_base.rda")
download.file("https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/royr2/datasets/blob/main/accepted_base.rda", destfile = "sample")
setwd("E:/Github/royr2")
# First create a target to model for (bad flag)
unique(accepted_base$loan_status)
data.frame(table(accepted_base$loan_status))
names(accepted_base)
knitr::opts_chunk$set(collapse = TRUE)
load("/Github/royr2/download/accepted_base.rda")
dim(accepted_base)
class(accepted_base)
library(dplyr)
library(magrittr)
unique(accepted_base$loan_status)
# For simplicity we'll just use
# 1. "Charged Off"
# 2. "Does not meet the credit policy. Status:Charged Off"
codes <- c("Charged Off", "Does not meet the credit policy. Status:Charged Off")
accepted_base %<>% mutate(bad_flag = ifelse(loan_status %in% codes, 1, 0))
accepted_base %>%
summarise(events = sum(bad_flag == 1),
non_events = sum(bad_flag == 0)) %>%
mutate(event_rate = events/(events + non_events))
# Check out available features (not shown here for brevity)
colnames(accepted_base)
unique(accepted_base$home_ownership)
mdl <- glm(bad_flag ~ loan_amnt + term + mths_since_last_delinq + factor(home_ownership))
accepted_base %<>% mutate(bad_flag = ifelse(loan_status %in% codes, 1, 0))
mdl <- glm(bad_flag ~ loan_amnt + term + mths_since_last_delinq + factor(home_ownership))
mdl <- glm(formula = bad_flag ~ loan_amnt + term + mths_since_last_delinq + factor(home_ownership),
family = "binomial",
data = accepted_base)
mdl <- glm(formula = bad_flag ~ loan_amnt + term + mths_since_last_delinq + factor(home_ownership) + annual_inc,
family = "binomial",
data = accepted_base)
unique(accepted_base$pymnt_plan)
mdl <- glm(
formula = bad_flag ~ loan_amnt + term + mths_since_last_delinq + factor(home_ownership) + factor(pymnt_plan),
family = "binomial",
data = accepted_base
)
# Train Test split
# install.package("rsample")  ## If needed
idx <- rsample::initial_split(data = accepted_base, prop = 0.7)
idx
accepted_base[idx] %>% dim()
accepted_base[idx,] %>% dim()
idx$in_id
accepted_base[idx$in_id,] %>% dim()
idx <- sample(1:nrow(accepted_base), size = 0.7 * nrow(accepted_base), replace = F)
# Train Test split
idx <- sample(1:nrow(accepted_base), size = 0.7 * nrow(accepted_base), replace = F)
train <- accepted_base[idx,]
test <- accepted_base[-idx,]
dim(train)
dim(test)
mdl <- glm(
formula = bad_flag ~ loan_amnt + term + mths_since_last_delinq + factor(home_ownership) + factor(pymnt_plan),
family = "binomial",
data = train
)
# First attach model output to test dataset
test$pred <- predict(mdl, newdata = test)
# First attach model output to test dataset
test$pred <- predict(mdl, new_data = test)
# First attach model output to test dataset
test$pred <- predict(mdl, newdata = test)
unique(train$home_ownership
)
unique(test$home_ownership)
unique(accepted_base$mths_since_last_delinq)
unique(accepted_base$pymnt_plan)
accepted_base %<>%
filter(home_ownership != "",
pymnt_plan != "")
dim(train)
dim(test)
mdl <- glm(
formula = bad_flag ~ loan_amnt + term + mths_since_last_delinq + factor(home_ownership) + factor(pymnt_plan),
family = "binomial",
data = train
)
# First attach model output to test dataset
test$pred <- predict(mdl, newdata = test)
accepted_base %<>%
filter(home_ownership != "",
pymnt_plan != "") %>%
mutate(home_ownership = factor(home_ownership),
pymnt_plan = factor(pymnt_plan))
# Train Test split
idx <- sample(1:nrow(accepted_base), size = 0.7 * nrow(accepted_base), replace = F)
train <- accepted_base[idx,]
test <- accepted_base[-idx,]
dim(train)
dim(test)
mdl <- glm(
formula = bad_flag ~ loan_amnt + term + mths_since_last_delinq + home_ownership + pymnt_plan,
family = "binomial",
data = train
)
# First attach model output to test dataset
test$pred <- predict(mdl, newdata = test)
hist(test$pred)
range(pred)
range(test$pred)
sum(is.na(test$pred))
test %>% filter(is.na(pred))
accepted_base %<>%
filter(home_ownership != "",
pymnt_plan != "") %>%
mutate(home_ownership = factor(home_ownership),
pymnt_plan = factor(pymnt_plan)) %>%
na.exclude()
dim(accepted_base)
knitr::opts_chunk$set(collapse = TRUE)
load("/Github/royr2/download/accepted_base.rda")
dim(accepted_base)
class(accepted_base)
library(dplyr)
library(magrittr)
unique(accepted_base$loan_status)
# For simplicity we'll just use
# 1. "Charged Off"
# 2. "Does not meet the credit policy. Status:Charged Off"
codes <- c("Charged Off", "Does not meet the credit policy. Status:Charged Off")
accepted_base %<>% mutate(bad_flag = ifelse(loan_status %in% codes, 1, 0))
accepted_base %>%
summarise(events = sum(bad_flag == 1),
non_events = sum(bad_flag == 0)) %>%
mutate(event_rate = events/(events + non_events))
accepted_base %<>%
# Remove cases where home ownership and payment plan are not reported
filter(home_ownership != "",
pymnt_plan != "") %>%
mutate(home_ownership = factor(home_ownership),
pymnt_plan = factor(pymnt_plan)) %>%
# Replace NA values with some default value
tidyr::replace_na(-1)
dim(accepted_base)
accepted_base %<>%
# Remove cases where home ownership and payment plan are not reported
filter(home_ownership != "",
pymnt_plan != "") %>%
# Convert these two variables into factors
mutate(home_ownership = factor(home_ownership),
pymnt_plan = factor(pymnt_plan)) %>%
# Replace NA values with some default value
tidyr::replace_na(-1)
library(dplyr)
library(magrittr)
library(tidyr)
accepted_base %<>%
# Remove cases where home ownership and payment plan are not reported
filter(home_ownership != "",
pymnt_plan != "") %>%
# Convert these two variables into factors
mutate(home_ownership = factor(home_ownership),
pymnt_plan = factor(pymnt_plan)) %>%
# Replace NA values with some default value
replace_na(-1)
accepted_base %<>%
# Replace NA values with some default value
replace_na(-1) %>%
# Remove cases where home ownership and payment plan are not reported
filter(home_ownership != "",
pymnt_plan != "") %>%
# Convert these two variables into factors
mutate(home_ownership = factor(home_ownership),
pymnt_plan = factor(pymnt_plan))
write.csv(accepted_base, "download/credit_sample.csv")
sample <- read.csv("/Github/royr2/download/accepted_base.csv")
sample <- read.csv("/Github/royr2/download/credit_sample.csv")
dim(sample)
class(sample)
library(dplyr)
library(magrittr)
library(tidyr)
install.packages("pacman")
library(pacman)
p_load(dplyr)
p_load(magrittr)
p_load(tidyr)
unique(sample$loan_status)
# For simplicity we'll just use
# 1. "Charged Off"
# 2. "Does not meet the credit policy. Status:Charged Off"
codes <- c("Charged Off", "Does not meet the credit policy. Status:Charged Off")
sample %<>% mutate(bad_flag = ifelse(loan_status %in% codes, 1, 0))
sample %>%
summarise(events = sum(bad_flag == 1),
non_events = sum(bad_flag == 0)) %>%
mutate(event_rate = events/(events + non_events))
library(pacman)
p_load(c("dplyr", "magrittr", "tidyr"))
knitr::opts_chunk$set(collapse = TRUE)
p_load(dplyr, magrittr, tidyr)
library(pacman)
p_load(dplyr, magrittr, tidyr)
?pacman
?pacman::p_author
library(pacman)
# p_load automatically installs packages if needed
p_load(dplyr, magrittr, tidyr)
sample <- read.csv("/Github/royr2/download/credit_sample.csv")
dim(sample)
class(sample)
unique(sample$loan_status)
# For simplicity we'll just use
# 1. "Charged Off"
# 2. "Does not meet the credit policy. Status:Charged Off"
codes <- c("Charged Off", "Does not meet the credit policy. Status:Charged Off")
sample %<>% mutate(bad_flag = ifelse(loan_status %in% codes, 1, 0))
sample %>%
summarise(events = sum(bad_flag == 1),
non_events = sum(bad_flag == 0)) %>%
mutate(event_rate = events/(events + non_events))
# Check out available features (not shown here for brevity)
colnames(sample)
sample %<>%
# Replace NA values with some default value
replace_na(-1) %>%
# Remove cases where home ownership and payment plan are not reported
filter(home_ownership != "",
pymnt_plan != "") %>%
# Convert these two variables into factors
mutate(home_ownership = factor(home_ownership),
pymnt_plan = factor(pymnt_plan))
?replace_na
na_replace(list(5))
replace_na(list(5))
replace_na(list(5, NA, 4))
replace_na(list(5, NA, 4), -1)
class(sample)
sample %>%
replace_na(-1)
# Replace all NA values with a default value
sample[is.na(sample)] <- -1
sample %<>%
# Remove cases where home ownership and payment plan are not reported
filter(home_ownership != "",
pymnt_plan != "") %>%
# Convert these two variables into factors
mutate(home_ownership = factor(home_ownership),
pymnt_plan = factor(pymnt_plan))
# Train Test split
idx <- sample(1:nrow(sample), size = 0.7 * nrow(sample), replace = F)
train <- sample[idx,]
test <- sample[-idx,]
dim(train)
dim(test)
mdl <- glm(
formula = bad_flag ~ loan_amnt + term + mths_since_last_delinq + home_ownership + pymnt_plan,
family = "binomial",
data = train
)
# First attach model output to test dataset
test$pred <- predict(mdl, newdata = test)
hist(test$pred)
sum(is.na(test$pred))
range(test$pred)
# Bin predictions based on quantiles
q <- quantile(test$pred, probs = seq(0, 1, length.out = 10))
test$bins <- cut(test$pred, breaks = q, include.lowest = T, right = T, ordered_result = T)
unique(test$bins)
# Start with the test dataset and start to summarise
gains_table <- test %>%
group_by(bins) %>%
summarise(total = n(),
events = sum(bad_flag == 1),
non_events = sum(bad_flag == 0))
head(gains_table)
DT::datatable(gains_table)
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
huxtable::huxtable(gains_table)
