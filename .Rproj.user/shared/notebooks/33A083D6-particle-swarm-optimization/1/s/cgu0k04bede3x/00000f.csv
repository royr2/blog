"0","# Define benchmark portfolio (equally weighted across all stocks)"
"0","bench_wts <- rep(1/n_stocks, n_stocks)"
"0",""
"0","# Calculate the time series of benchmark returns"
"0","bench_returns <- as.matrix(returns_df) %*% t(t(bench_wts))"
"0",""
"0","# Create a new objective function that includes tracking error"
"0","obj_func_TE <- function(wts,  "
"0","                        risk_av = 10,     # Risk aversion parameter"
"0","                        lambda1 = 10,    # Full investment constraint weight"
"0","                        lambda2 = 50,    # Tracking error constraint weight"
"0","                        ret_vec, cov_mat){"
"0","  "
"0","  # Calculate portfolio metrics"
"0","  port_returns <- ret_vec %*% wts                      # Expected portfolio return"
"0","  port_risk <- t(wts) %*% cov_mat %*% wts             # Portfolio variance"
"0","  port_returns_ts <- as.matrix(returns_df) %*% t(t(wts))  # Time series of portfolio returns"
"0","  "
"0","  # Original mean-variance objective"
"0","  obj <- port_returns - risk_av * port_risk"
"0","  "
"0","  # Full investment constraint (weights sum to 1)"
"0","  obj <- obj - lambda1 * (sum(wts) - 1)^2"
"0","  "
"0","  # Tracking error constraint (penalize deviation from benchmark)"
"0","  # Tracking error is measured as the standard deviation of the difference"
"0","  # between portfolio returns and benchmark returns"
"0","  obj <- obj - lambda2 * sd(port_returns_ts - bench_returns)"
"0","  "
"0","  return(-obj)  # Return negative for minimization"
"0","}"
"0",""
"0","# Run optimization with the tracking error constraint"
"0","opt <- psoptim("
"0","  # Initial particle positions"
"0","  par = rep(0, n_stocks),"
"0","  "
"0","  # Use our new objective function with tracking error"
"0","  fn = obj_func_TE,"
"0","  "
"0","  # Pass the expected returns and covariance matrix"
"0","  ret_vec = mean_returns, "
"0","  cov_mat = cov_mat,"
"0","  "
"0","  # Set constraint parameters"
"0","  lambda1 = 10,    # Weight for full investment constraint"
"0","  risk_av = 1000,  # Risk aversion parameter"
"0","  "
"0","  # Set bounds for weights"
"0","  lower = rep(0, n_stocks),"
"0","  upper = rep(1, n_stocks),"
"0","  "
"0","  # Configure the PSO algorithm"
"0","  control = list("
"0","    maxit = 200,          # Maximum iterations"
"0","    s = 100,               # Swarm size"
"0","    maxit.stagnate = 500   # Stop if no improvement after this many iterations"
"0","  )"
"0",")"
"0",""
"0","# Calculate and display the expected return of the optimized portfolio"
"0","paste(""Portfolio returns:"", round(opt$par %*% mean_returns, 5))"
"1","[1]"
"1"," ""Portfolio returns: 0.00068"""
"1","
"
"0","# Calculate and display the standard deviation (risk) of the optimized portfolio"
"0","paste(""Portfolio Std dev:"", round(sqrt(opt$par %*% cov_mat %*% opt$par), 5))"
"1","[1]"
"1"," ""Portfolio Std dev: 0.01099"""
"1","
"
"0","# Verify that the weights sum to approximately 1"
"0","sum(opt$par)"
"1","[1]"
"1"," 0.995556"
"1","
"
