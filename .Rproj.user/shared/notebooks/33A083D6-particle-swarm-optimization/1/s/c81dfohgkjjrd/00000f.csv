"0","obj_func <- function(wts, "
"0","                     risk_av = 10,  # Risk aversion parameter"
"0","                     lambda1 = 10,  # Penalty weight for full investment constraint"
"0","                     lambda2 = 1e2,  # Reserved for additional constraints"
"0","                     ret_vec, cov_mat){"
"0","  "
"0","  # Calculate expected portfolio return (weighted average of asset returns)"
"0","  port_returns <- ret_vec %*% wts"
"0","  "
"0","  # Calculate portfolio risk (quadratic form using covariance matrix)"
"0","  port_risk <- t(wts) %*% cov_mat %*% wts"
"0","  "
"0","  # Mean-variance utility function: return - risk_aversion * risk"
"0","  # This is the core Markowitz portfolio optimization formula"
"0","  obj <- port_returns - risk_av * port_risk"
"0","  "
"0","  # Add penalty for violating the full investment constraint (sum of weights = 1)"
"0","  # The squared term ensures the penalty increases quadratically with violation size"
"0","  obj <- obj - lambda1 * (sum(wts) - 1)^2"
"0","  "
"0","  # Return negative value since PSO minimizes by default, but we want to maximize"
"0","  # our objective (higher returns, lower risk)"
"0","  return(-obj)"
"0","}"
