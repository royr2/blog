"0","#| label: model-comparison"
"0",""
"0","# Evaluate population model performance on the KG segment"
"0","pop_perf <- smple %>%"
"0","  filter(segment == ""KG"") %>%                     # Focus on KG segment only"
"0","  mutate(pred = predict(mdl_pop, newdata = .),   # Get model predictions"
"0","         score = scaling_func(pred),             # Convert to credit score scale"
"0","         total = n()) %>%                         # Total number of KG customers"
"0","  arrange(desc(score)) %>%                        # Sort by score (best first)"
"0","  mutate(cum_count = row_number(),               # Cumulative count"
"0","         cum_pct = round(cum_count / total, 2),            # Approval rate"
"0","         cum_bad = cumsum(bad_flag),             # Cumulative bad loans"
"0","         cum_bad_rate = cum_bad / cum_count) %>% # Bad rate at each approval threshold"
"0","  filter(cum_pct %in% seq(0.1, 1, 0.1))          # Sample at 10% intervals"
"0",""
"0","# Evaluate segment model performance on the KG segment"
"0","seg_perf <- smple %>%"
"0","  filter(segment == ""KG"") %>%                     # Same segment"
"0","  mutate(pred = predict(mdl_seg, newdata = .),   # But using segment model"
"0","         score = scaling_func(pred),"
"0","         total = n()) %>%"
"0","  arrange(desc(score)) %>%"
"0","  mutate(cum_count = row_number(),"
"0","         cum_pct = round(cum_count / total, 2),"
"0","         cum_bad = cumsum(bad_flag),"
"0","         cum_bad_rate = cum_bad / cum_count) %>%"
"0","  filter(cum_pct %in% seq(0.1, 1, 0.1))"
